{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet WorkoutEditComponent = class WorkoutEditComponent {\n  get tags() {\n    return this.exerciseForm.get('tags');\n  }\n  constructor(fb, route, router, exerciseService) {\n    this.fb = fb;\n    this.route = route;\n    this.router = router;\n    this.exerciseService = exerciseService;\n    this.pageTitle = 'exercise Edit';\n    // Use with the generic validation message class\n    this.displayMessage = {};\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    this.validationMessages = {\n      exerciseName: {\n        required: 'exercise name is required.',\n        minlength: 'exercise name must be at least three characters.',\n        maxlength: 'exercise name cannot exceed 50 characters.'\n      },\n      exerciseCode: {\n        required: 'exercise code is required.'\n      },\n      starRating: {\n        range: 'Rate the exercise between 1 (lowest) and 5 (highest).'\n      }\n    };\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n  ngOnInit() {\n    this.exerciseForm = this.fb.group({\n      exerciseName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\n      exerciseCode: ['', Validators.required],\n      starRating: ['', NumberValidators.range(1, 5)],\n      tags: this.fb.array([]),\n      description: ''\n    });\n    // Read the exercise Id from the route parameter\n    this.sub = this.route.paramMap.subscribe(params => {\n      const id = +params.get('id');\n      this.getexercise(id);\n    });\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n  ngAfterViewInit() {\n    // Watch for the blur event from any input element on the form.\n    // This is required because the valueChanges does not provide notification on blur\n    const controlBlurs = this.formInputElements.map(formControl => fromEvent(formControl.nativeElement, 'blur'));\n    // Merge the blur event observable with the valueChanges observable\n    // so we only need to subscribe once.\n    merge(this.exerciseForm.valueChanges, ...controlBlurs).pipe(debounceTime(800)).subscribe(value => {\n      this.displayMessage = this.genericValidator.processMessages(this.exerciseForm);\n    });\n  }\n  addTag() {\n    this.tags.push(new FormControl());\n  }\n  deleteTag(index) {\n    this.tags.removeAt(index);\n    this.tags.markAsDirty();\n  }\n  getexercise(id) {\n    this.exerciseService.getexercise(id).subscribe({\n      next: exercise => this.displayexercise(exercise),\n      error: err => this.errorMessage = err\n    });\n  }\n  displayexercise(exercise) {\n    if (this.exerciseForm) {\n      this.exerciseForm.reset();\n    }\n    this.exercise = exercise;\n    if (this.exercise.id === 0) {\n      this.pageTitle = 'Add exercise';\n    } else {\n      this.pageTitle = `Edit exercise: ${this.exercise.exerciseName}`;\n    }\n    // Update the data on the form\n    this.exerciseForm.patchValue({\n      exerciseName: this.exercise.exerciseName,\n      exerciseCode: this.exercise.exerciseCode,\n      starRating: this.exercise.starRating,\n      description: this.exercise.description\n    });\n    this.exerciseForm.setControl('tags', this.fb.array(this.exercise.tags || []));\n  }\n  deleteexercise() {\n    if (this.exercise.id === 0) {\n      // Don't delete, it was never saved.\n      this.onSaveComplete();\n    } else {\n      if (confirm(`Really delete the exercise: ${this.exercise.exerciseName}?`)) {\n        this.exerciseService.deleteexercise(this.exercise.id).subscribe({\n          next: () => this.onSaveComplete(),\n          error: err => this.errorMessage = err\n        });\n      }\n    }\n  }\n  saveexercise() {\n    if (this.exerciseForm.valid) {\n      if (this.exerciseForm.dirty) {\n        const p = {\n          ...this.exercise,\n          ...this.exerciseForm.value\n        };\n        if (p.id === 0) {\n          this.exerciseService.createexercise(p).subscribe({\n            next: () => this.onSaveComplete(),\n            error: err => this.errorMessage = err\n          });\n        } else {\n          this.exerciseService.updateexercise(p).subscribe({\n            next: () => this.onSaveComplete(),\n            error: err => this.errorMessage = err\n          });\n        }\n      } else {\n        this.onSaveComplete();\n      }\n    } else {\n      this.errorMessage = 'Please correct the validation errors.';\n    }\n  }\n  onSaveComplete() {\n    // Reset the form to clear the flags\n    this.exerciseForm.reset();\n    this.router.navigate(['/exercises']);\n  }\n};\nWorkoutEditComponent = __decorate([Component({\n  selector: 'app-workout-edit',\n  templateUrl: './workout-edit.component.html',\n  styleUrls: ['./workout-edit.component.css']\n})], WorkoutEditComponent);\nexport { WorkoutEditComponent };","map":{"version":3,"mappings":"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","names":["Component","WorkoutEditComponent","tags","exerciseForm","get","constructor","fb","route","router","exerciseService","validationMessages","exerciseName","required","minlength","maxlength","exerciseCode","starRating","range","genericValidator","GenericValidator","ngOnInit","group","Validators","minLength","maxLength","NumberValidators","array","description","sub","paramMap","subscribe","params","id","getexercise","ngOnDestroy","unsubscribe","ngAfterViewInit","controlBlurs","formInputElements","map","formControl","fromEvent","nativeElement","merge","valueChanges","pipe","debounceTime","value","displayMessage","processMessages","addTag","push","FormControl","deleteTag","index","removeAt","markAsDirty","next","exercise","displayexercise","error","err","errorMessage","reset","pageTitle","patchValue","setControl","deleteexercise","onSaveComplete","confirm","saveexercise","valid","dirty","p","createexercise","updateexercise","navigate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\repos\\GymResult\\GymAngular\\src\\app\\workout\\workout-edit.component.ts"],"sourcesContent":["import { AfterViewInit, Component } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { WorkoutService } from '../workout.service';\nimport { Exerceise } from './exercise';\n\nimport { Workout } from './workout';\n\n@Component({\n  selector: 'app-workout-edit',\n  templateUrl: './workout-edit.component.html',\n  styleUrls: ['./workout-edit.component.css']\n})\nexport class WorkoutEditComponent  {\n\n\n  pageTitle = 'exercise Edit';\n  errorMessage: string;\n  exerciseForm: FormGroup;\n\n  exercise: Exerceise;\n  private sub: Subscription;\n\n  // Use with the generic validation message class\n  displayMessage: { [key: string]: string } = {};\n  private validationMessages: { [key: string]: { [key: string]: string } };\n  private genericValidator: GenericValidator;\n\n  get tags(): FormArray {\n    return this.exerciseForm.get('tags') as FormArray;\n  }\n\n  constructor(private fb: FormBuilder,\n              private route: ActivatedRoute,\n              private router: Router,\n              private exerciseService: exerciseService) {\n\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    this.validationMessages = {\n      exerciseName: {\n        required: 'exercise name is required.',\n        minlength: 'exercise name must be at least three characters.',\n        maxlength: 'exercise name cannot exceed 50 characters.'\n      },\n      exerciseCode: {\n        required: 'exercise code is required.'\n      },\n      starRating: {\n        range: 'Rate the exercise between 1 (lowest) and 5 (highest).'\n      }\n    };\n\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n\n  ngOnInit(): void {\n    this.exerciseForm = this.fb.group({\n      exerciseName: ['', [Validators.required,\n                         Validators.minLength(3),\n                         Validators.maxLength(50)]],\n      exerciseCode: ['', Validators.required],\n      starRating: ['', NumberValidators.range(1, 5)],\n      tags: this.fb.array([]),\n      description: ''\n    });\n\n    // Read the exercise Id from the route parameter\n    this.sub = this.route.paramMap.subscribe(\n      params => {\n        const id = +params.get('id');\n        this.getexercise(id);\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.sub.unsubscribe();\n  }\n\n  ngAfterViewInit(): void {\n    // Watch for the blur event from any input element on the form.\n    // This is required because the valueChanges does not provide notification on blur\n    const controlBlurs: Observable<any>[] = this.formInputElements\n      .map((formControl: ElementRef) => fromEvent(formControl.nativeElement, 'blur'));\n\n    // Merge the blur event observable with the valueChanges observable\n    // so we only need to subscribe once.\n    merge(this.exerciseForm.valueChanges, ...controlBlurs).pipe(\n      debounceTime(800)\n    ).subscribe(value => {\n      this.displayMessage = this.genericValidator.processMessages(this.exerciseForm);\n    });\n  }\n\n  addTag(): void {\n    this.tags.push(new FormControl());\n  }\n\n  deleteTag(index: number): void {\n    this.tags.removeAt(index);\n    this.tags.markAsDirty();\n  }\n\n  getexercise(id: number): void {\n    this.exerciseService.getexercise(id)\n      .subscribe({\n        next: (exercise: exercise) => this.displayexercise(exercise),\n        error: err => this.errorMessage = err\n      });\n  }\n\n  displayexercise(exercise: exercise): void {\n    if (this.exerciseForm) {\n      this.exerciseForm.reset();\n    }\n    this.exercise = exercise;\n\n    if (this.exercise.id === 0) {\n      this.pageTitle = 'Add exercise';\n    } else {\n      this.pageTitle = `Edit exercise: ${this.exercise.exerciseName}`;\n    }\n\n    // Update the data on the form\n    this.exerciseForm.patchValue({\n      exerciseName: this.exercise.exerciseName,\n      exerciseCode: this.exercise.exerciseCode,\n      starRating: this.exercise.starRating,\n      description: this.exercise.description\n    });\n    this.exerciseForm.setControl('tags', this.fb.array(this.exercise.tags || []));\n  }\n\n  deleteexercise(): void {\n    if (this.exercise.id === 0) {\n      // Don't delete, it was never saved.\n      this.onSaveComplete();\n    } else {\n      if (confirm(`Really delete the exercise: ${this.exercise.exerciseName}?`)) {\n        this.exerciseService.deleteexercise(this.exercise.id)\n          .subscribe({\n            next: () => this.onSaveComplete(),\n            error: err => this.errorMessage = err\n          });\n      }\n    }\n  }\n\n  saveexercise(): void {\n    if (this.exerciseForm.valid) {\n      if (this.exerciseForm.dirty) {\n        const p = { ...this.exercise, ...this.exerciseForm.value };\n\n        if (p.id === 0) {\n          this.exerciseService.createexercise(p)\n            .subscribe({\n              next: () => this.onSaveComplete(),\n              error: err => this.errorMessage = err\n            });\n        } else {\n          this.exerciseService.updateexercise(p)\n            .subscribe({\n              next: () => this.onSaveComplete(),\n              error: err => this.errorMessage = err\n            });\n        }\n      } else {\n        this.onSaveComplete();\n      }\n    } else {\n      this.errorMessage = 'Please correct the validation errors.';\n    }\n  }\n\n  onSaveComplete(): void {\n    // Reset the form to clear the flags\n    this.exerciseForm.reset();\n    this.router.navigate(['/exercises']);\n  }\n    \n\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}