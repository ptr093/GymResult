{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class WorkoutService {\n  constructor(http) {\n    this.http = http;\n    this.WorkoutsUrl = 'https://localhost:7147/api/traings';\n  }\n  getWorkouts() {\n    console.log('probuje tu czy jak?');\n    return this.http.get(this.WorkoutsUrl).pipe(tap(data => console.log(JSON.stringify(data))), catchError(this.handleError));\n  }\n  getExercises(id) {\n    this.WorkoutsUrl = \"\";\n    // if (id === 0) {\n    //   return of(this.initializeExercise());\n    // }\n    let url = `https://localhost:7147/api/traings/${id}`;\n    url += '/exerceises';\n    return this.http.get(url).pipe(tap(data => console.log('getExercises: ' + JSON.stringify(data))), catchError(this.handleError));\n  }\n  getExercise(idTraining, idExercise) {\n    this.WorkoutsUrl = \"\";\n    // if (id === 0) {\n    //   return of(this.initializeExercise());\n    // }\n    let url = `https://localhost:7147/api/traings/${idTraining}`;\n    url += `/exerceises/exercise?exerceiseId=${idExercise}`;\n    return this.http.get(url).pipe(tap(data => console.log('getExercises: ' + JSON.stringify(data))), catchError(this.handleError));\n  }\n  getWorkout(id) {\n    if (id === 0) {\n      return of(this.initializeWorkout());\n    }\n    const url = `${this.WorkoutsUrl}/${id}`;\n    return this.http.get(url).pipe(tap(data => console.log('getWorkout: ' + JSON.stringify(data))), catchError(this.handleError));\n  }\n  createWorkout(exercise) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    exercise.id = 0;\n    let url = `https://localhost:7147/api/traings/${exercise.trainingId}`;\n    url += '/exerceises';\n    return this.http.post(url, exercise, {\n      headers\n    }).pipe(tap(data => console.log('createWorkout: ' + JSON.stringify(data))), catchError(this.handleError));\n  }\n  deleteWorkout(idWorkout, idExercise) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    let url = `https://localhost:7147/api/traings/${idWorkout}`;\n    url += `/exerceises?exerceiseId=${idExercise}`;\n    return this.http.delete(url, {\n      headers\n    }).pipe(tap(data => console.log('deleteWorkout: ' + idExercise)), catchError(this.handleError));\n  }\n  updateWorkout(exercise) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json-patch+json'\n    });\n    let url = `https://localhost:7147/api/traings/${exercise.trainingId}`;\n    url += `/exerceises/${exercise.id}`;\n    const body = [{\n      \"operationType\": 0,\n      \"path\": \"/series\",\n      \"op\": \"replace\",\n      \"from\": \"string\",\n      \"value\": exercise.series\n    }, {\n      \"operationType\": 0,\n      \"path\": \"/weight\",\n      \"op\": \"replace\",\n      \"from\": \"string\",\n      \"value\": exercise.weight\n    }, {\n      \"operationType\": 0,\n      \"path\": \"/category\",\n      \"op\": \"replace\",\n      \"from\": \"string\",\n      \"value\": exercise.category\n    }];\n    return this.http.patch(url, body, {\n      headers\n    }).pipe(tap(() => console.log('updateWorkout: ' + exercise)),\n    // Return the Workout on an update\n    map(() => exercise), catchError(this.handleError));\n  }\n  handleError(err) {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    let errorMessage;\n    if (err.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;\n    }\n    console.error(err);\n    return throwError(errorMessage);\n  }\n  initializeWorkout() {\n    // Return an initialized object\n    return {\n      id: 0,\n      date: new Date(),\n      description: '',\n      location: ''\n    };\n  }\n  initializeExercise() {\n    // Return an initialized object\n    return {\n      id: 0,\n      category: '',\n      weight: 0,\n      series: 0,\n      trainingId: 0\n    };\n  }\n}\nWorkoutService.ɵfac = function WorkoutService_Factory(t) {\n  return new (t || WorkoutService)(i0.ɵɵinject(i1.HttpClient));\n};\nWorkoutService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WorkoutService,\n  factory: WorkoutService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","of","throwError","catchError","tap","map","WorkoutService","constructor","http","getWorkouts","console","log","get","WorkoutsUrl","pipe","data","JSON","stringify","handleError","getExercises","id","url","getExercise","idTraining","idExercise","getWorkout","initializeWorkout","createWorkout","exercise","headers","trainingId","post","deleteWorkout","idWorkout","delete","updateWorkout","body","series","weight","category","patch","err","errorMessage","error","ErrorEvent","message","status","date","Date","description","location","initializeExercise","factory","providedIn"],"sourceRoot":"","sources":["D:\\repos\\GymResult\\GymAngular\\src\\app\\workout.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport { Exerceise } from './workout/exercise';\nimport { Workout } from './workout/workout';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WorkoutService {\n\n  private WorkoutsUrl = 'https://localhost:7147/api/traings';\n\n  constructor(private http: HttpClient) {\n    \n   }\n\n  getWorkouts(): Observable<Workout[]> {\n    console.log('probuje tu czy jak?')\n    return this.http.get<Workout[]>(this.WorkoutsUrl)\n      .pipe(\n        tap(data => console.log(JSON.stringify(data))),\n        catchError(this.handleError)\n      );\n  }\n\n\n  getExercises(id: number): Observable<Exerceise[]> {\n    this.WorkoutsUrl =\"\"\n    // if (id === 0) {\n    //   return of(this.initializeExercise());\n    // }\n    let url = `https://localhost:7147/api/traings/${id}`;\n    url +='/exerceises'\n    return this.http.get<Exerceise[]>(url)\n      .pipe(\n        tap(data => console.log('getExercises: ' + JSON.stringify(data))),\n        catchError(this.handleError)\n      );\n  }\n\n  getExercise(idTraining:number, idExercise: number): Observable<Exerceise> {\n    this.WorkoutsUrl =\"\"\n    // if (id === 0) {\n    //   return of(this.initializeExercise());\n    // }\n    let url = `https://localhost:7147/api/traings/${idTraining}`;\n    url += `/exerceises/exercise?exerceiseId=${idExercise}` ;\n    return this.http.get<Exerceise>(url)\n      .pipe(\n        tap(data => console.log('getExercises: ' + JSON.stringify(data))),\n        catchError(this.handleError)\n      );\n  }\n\n\n  getWorkout(id: number): Observable<Workout> {\n    if (id === 0) {\n      return of(this.initializeWorkout());\n    }\n    const url = `${this.WorkoutsUrl}/${id}`;\n    return this.http.get<Workout>(url)\n      .pipe(\n        tap(data => console.log('getWorkout: ' + JSON.stringify(data))),\n        catchError(this.handleError)\n      );\n  }\n\n  createWorkout(exercise: Exerceise): Observable<Workout> {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    exercise.id = 0;\n    let url = `https://localhost:7147/api/traings/${exercise.trainingId}`;\n    url +='/exerceises'\n    return this.http.post<Workout>(url, exercise, { headers })\n      .pipe(\n        tap(data => console.log('createWorkout: ' + JSON.stringify(data))),\n        catchError(this.handleError)\n      );\n  }\n\n  deleteWorkout(idWorkout: number, idExercise: number): Observable<{}> {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n   let url = `https://localhost:7147/api/traings/${idWorkout}`;\n   url += `/exerceises?exerceiseId=${idExercise}` ;\n    \n    return this.http.delete<Workout>(url, { headers })\n      .pipe(\n        tap(data => console.log('deleteWorkout: ' + idExercise)),\n        catchError(this.handleError)\n      );\n  }\n\n  updateWorkout(exercise: Exerceise): Observable<Exerceise> {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json-patch+json' });\n    let url = `https://localhost:7147/api/traings/${exercise.trainingId}`;\n    url += `/exerceises/${exercise.id}` ;\n\n    const body = [{\n      \"operationType\": 0,\n    \"path\": \"/series\",\n    \"op\": \"replace\",\n    \"from\": \"string\",\n    \"value\": exercise.series\n  },\n  {\n    \"operationType\": 0,\n    \"path\": \"/weight\",\n    \"op\": \"replace\",\n    \"from\": \"string\",\n    \"value\": exercise.weight\n  },\n  {\n    \"operationType\": 0,\n    \"path\": \"/category\",\n    \"op\": \"replace\",\n    \"from\": \"string\",\n    \"value\": exercise.category\n  }\n\n];\n   \n    return this.http.patch<Exerceise>(url, body, { headers })\n      .pipe(\n        tap(() => console.log('updateWorkout: ' + exercise)),\n        // Return the Workout on an update\n        map(() => exercise),\n        catchError(this.handleError)\n      );\n  }\n\n  private handleError(err: { error: { message: any; }; status: any; body: { error: any; }; }): Observable<never> {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    let errorMessage: string;\n    if (err.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;\n    }\n    console.error(err);\n    return throwError(errorMessage);\n  }\n\n  private initializeWorkout(): Workout {\n    // Return an initialized object\n    return {\n\n      id :0,\n      date : new Date(),\n      description :'',\n      location :''\n    };\n  }\n\n    \n  private initializeExercise(): Exerceise {\n    // Return an initialized object\n    return {\n      id :0,\n      category : '',\n     weight : 0,\n      series:0,\n     trainingId:0\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}