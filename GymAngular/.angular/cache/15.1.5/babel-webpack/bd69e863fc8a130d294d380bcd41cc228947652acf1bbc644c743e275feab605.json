{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ElementRef, ViewChildren } from '@angular/core';\nimport { FormControlName, Validators } from '@angular/forms';\nimport { debounceTime, fromEvent, merge } from 'rxjs';\nimport { GenericValidator } from '../generic-validator';\nlet WorkoutEditComponent = class WorkoutEditComponent {\n  ngAfterViewInit() {\n    // Watch for the blur event from any input element on the form.\n    // This is required because the valueChanges does not provide notification on blur\n    const controlBlurs = this.formInputElements.map(formControl => fromEvent(formControl.nativeElement, 'blur'));\n    // Merge the blur event observable with the valueChanges observable\n    // so we only need to subscribe once.\n    merge(this.exerciseForm.valueChanges, ...controlBlurs).pipe(debounceTime(800)).subscribe(value => {\n      this.displayMessage = this.genericValidator.processMessages(this.exerciseForm);\n    });\n  }\n  constructor(fb, route, router, workoutService) {\n    this.fb = fb;\n    this.route = route;\n    this.router = router;\n    this.workoutService = workoutService;\n    this.pageTitle = 'Product Edit';\n    this.errorMessage = '';\n    // Use with the generic validation message class\n    this.displayMessage = {};\n    this.emailMessage = '';\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    this.validationMessages = {\n      category: {\n        required: 'Kategoria jest wymagana',\n        minlength: 'Kategoria musi zawierać conajmniej 3 znaki',\n        maxlength: 'Katoria nie może zawierać więcej niż 50 znaków.'\n      },\n      series: {\n        required: 'Seria jest wymagana'\n      },\n      weight: {\n        required: 'Podaj ciężar'\n      }\n    };\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n  ngOnInit() {\n    this.exerciseForm = this.fb.group({\n      category: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\n      weight: ['', Validators.required],\n      series: ['', Validators.required]\n    });\n    let trainingId = Number(this.route.snapshot.paramMap.get('trainingId'));\n    let id = Number(this.route.snapshot.paramMap.get('id'));\n    this.workoutId = trainingId;\n    if (id !== 0) {\n      // Read the product Id from the route parameter\n      this.sub = this.route.paramMap.subscribe(params => {\n        this.getExercise(trainingId, id);\n      });\n    }\n  }\n  setMessage(c) {\n    this.emailMessage = '';\n    if ((c.touched || c.dirty) && c.errors) {\n      this.emailMessage = Object.keys(c.errors).map(key => this.validationMessages[key]).join(' ');\n    }\n  }\n  ngOnDestroy() {\n    this.sub === undefined ? \"\" : this.sub.unsubscribe();\n  }\n  getExercise(idTraining, idExercise) {\n    this.workoutService.getExercise(idTraining, idExercise).subscribe({\n      next: exercise => this.displayExercise(exercise),\n      error: err => this.errorMessage = err\n    });\n  }\n  displayExercise(exercise) {\n    if (this.exerciseForm) {\n      this.exerciseForm.reset();\n    }\n    this.exercise = exercise;\n    if (this.exercise.id === 0 || this.exercise.id === null) {\n      this.pageTitle = 'Add Exercise';\n    } else {\n      this.pageTitle = `Edit Exercise: ${this.exercise.category}`;\n    }\n    // Update the data on the form\n    this.exerciseForm.patchValue({\n      category: this.exercise.category,\n      weight: this.exercise.weight,\n      series: this.exercise.series\n    });\n  }\n  deleteExercise() {\n    if (this.exercise.id === 0) {\n      // Don't delete, it was never saved.\n      this.onSaveComplete();\n    } else {\n      if (confirm(`Really delete the product: ${this.exercise.category}?`)) {\n        this.workoutService.deleteWorkout(this.exercise.trainingId, this.exercise.id).subscribe({\n          next: () => this.onSaveComplete(),\n          error: err => this.errorMessage = err\n        });\n      }\n    }\n  }\n  saveExercise() {\n    if (this.exerciseForm.valid) {\n      if (this.exerciseForm.dirty) {\n        const p = {\n          ...this.exercise,\n          ...this.exerciseForm.value\n        };\n        console.log(p.idExercise, p.category, p.series);\n        if (this.exercise === undefined) {\n          p.trainingId = this.workoutId;\n          this.workoutService.createWorkout(p).subscribe({\n            next: () => this.onSaveComplete(),\n            error: err => this.errorMessage = err\n          });\n        } else {\n          this.workoutService.updateWorkout(p).subscribe({\n            next: () => this.onSaveComplete(),\n            error: err => this.errorMessage = err\n          });\n        }\n      } else {\n        this.onSaveComplete();\n      }\n    } else {\n      this.errorMessage = 'Please correct the validation errors.';\n    }\n  }\n  onSaveComplete() {\n    // Reset the form to clear the flags\n    this.exerciseForm.reset();\n    this.router.navigate(['/workout']);\n  }\n};\n__decorate([ViewChildren(FormControlName, {\n  read: ElementRef\n})], WorkoutEditComponent.prototype, \"formInputElements\", void 0);\nWorkoutEditComponent = __decorate([Component({\n  templateUrl: './workout-edit.component.html',\n  styleUrls: ['./workout-edit.component.css']\n})], WorkoutEditComponent);\nexport { WorkoutEditComponent };","map":{"version":3,"mappings":"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","names":["Component","ElementRef","ViewChildren","FormControlName","Validators","debounceTime","fromEvent","merge","GenericValidator","WorkoutEditComponent","ngAfterViewInit","controlBlurs","formInputElements","map","formControl","nativeElement","exerciseForm","valueChanges","pipe","subscribe","value","displayMessage","genericValidator","processMessages","constructor","fb","route","router","workoutService","validationMessages","category","required","minlength","maxlength","series","weight","ngOnInit","group","minLength","maxLength","trainingId","Number","snapshot","paramMap","get","id","workoutId","sub","params","getExercise","setMessage","c","emailMessage","touched","dirty","errors","Object","keys","key","join","ngOnDestroy","undefined","unsubscribe","idTraining","idExercise","next","exercise","displayExercise","error","err","errorMessage","reset","pageTitle","patchValue","deleteExercise","onSaveComplete","confirm","deleteWorkout","saveExercise","valid","p","console","log","createWorkout","updateWorkout","navigate","__decorate","read","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\repos\\GymResult\\GymAngular\\src\\app\\workout\\workout-edit.component.ts"],"sourcesContent":["import { AfterViewInit, Component, ElementRef, OnDestroy, OnInit, ViewChildren } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormControlName, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { debounceTime, fromEvent, merge, Observable, Subscription } from 'rxjs';\nimport { GenericValidator } from '../generic-validator';\n\n\nimport { WorkoutService } from '../workout.service';\nimport { Exerceise } from './exercise';\nimport { Workout } from './workout';\n\n@Component({\n\n  templateUrl: './workout-edit.component.html',\n  styleUrls: ['./workout-edit.component.css']\n})\nexport class WorkoutEditComponent implements  OnInit, OnDestroy, AfterViewInit  {\n  @ViewChildren(FormControlName, { read: ElementRef }) public formInputElements!: ElementRef[] \n\n  pageTitle = 'Product Edit';\n  errorMessage: string  = '';\n public exerciseForm!: FormGroup \n\n  public exercise!: Exerceise \n  public sub!: Subscription;\n  public workoutId!:number;\n\n  // Use with the generic validation message class\n  displayMessage: { [key: string]: string } = {};\n  private validationMessages: { [key: string]: { [key: string]: string } };\n  \n  private genericValidator: GenericValidator;\n\n  ngAfterViewInit(): void {\n    // Watch for the blur event from any input element on the form.\n    // This is required because the valueChanges does not provide notification on blur\n    const controlBlurs: Observable<any>[] = this.formInputElements\n      .map((formControl: ElementRef) => fromEvent(formControl.nativeElement, 'blur'));\n\n    // Merge the blur event observable with the valueChanges observable\n    // so we only need to subscribe once.\n    merge(this.exerciseForm.valueChanges, ...controlBlurs).pipe(\n      debounceTime(800)\n    ).subscribe(value => {\n      this.displayMessage = this.genericValidator.processMessages(this.exerciseForm);\n    });\n  }\n\n  constructor(private fb: FormBuilder,\n              private route: ActivatedRoute,\n              private router: Router,\n              private workoutService: WorkoutService) {\n\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n   this.validationMessages = {\n      category: {\n        required: 'Kategoria jest wymagana',\n        minlength: 'Kategoria musi zawierać conajmniej 3 znaki',\n        maxlength: 'Katoria nie może zawierać więcej niż 50 znaków.'\n      },\n      series: {\n        required: 'Seria jest wymagana'\n      },\n      weight: {\n        required: 'Podaj ciężar'\n      }\n    };\n\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n \n\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n\n  \n\n  ngOnInit(): void {\n    this.exerciseForm = this.fb.group({\n      category: ['', [Validators.required,\n                         Validators.minLength(3),\n                         Validators.maxLength(50)]],\n      weight: ['', Validators.required],\n      series: ['', Validators.required]\n      \n    });\n\n    let trainingId = Number(this.route.snapshot.paramMap.get('trainingId'));\n     let id = Number(this.route.snapshot.paramMap.get('id'));\n  \n   \n    this.workoutId=trainingId;\n\n\n     if (id !== 0){\n    // Read the product Id from the route parameter\n    this.sub = this.route.paramMap.subscribe(\n      params => {\n        \n        this.getExercise(trainingId,id);\n      }\n    );\n     }\n  }\n  emailMessage ='';\n  setMessage(c: AbstractControl): void {\n    this.emailMessage = '';\n    if ((c.touched || c.dirty) && c.errors) {\n      this.emailMessage = Object.keys(c.errors).map(\n        key => this.validationMessages[key]).join(' ');\n    }\n  }\n\n\n  ngOnDestroy(): void {\n\n     this.sub ===undefined? \"\": this.sub.unsubscribe();\n  }\n\n \n\n  getExercise(idTraining: number,idExercise: number): void {\n\n\n   \n    this.workoutService.getExercise(idTraining,idExercise)\n      .subscribe({\n        next: (exercise: Exerceise) => this.displayExercise(exercise),\n        error: err => this.errorMessage = err\n      });\n  \n  }\n\n\n  \n\n\n\n  displayExercise(exercise: Exerceise): void {\n    if (this.exerciseForm) {\n      this.exerciseForm.reset();\n    }\n    this.exercise = exercise;\n\n\n\n    if (this.exercise.id === 0 || this.exercise.id === null) {\n      this.pageTitle = 'Add Exercise';\n    } else {\n      this.pageTitle = `Edit Exercise: ${this.exercise.category}`;\n    }\n\n    // Update the data on the form\n    this.exerciseForm.patchValue({\n      category: this.exercise.category,\n      weight: this.exercise.weight,\n      series: this.exercise.series,\n   \n    });\n  \n  }\n\n  deleteExercise(): void {\n    if (this.exercise.id === 0) {\n      // Don't delete, it was never saved.\n      this.onSaveComplete();\n    } else {\n      if (confirm(`Really delete the product: ${this.exercise.category}?`)) {\n        this.workoutService.deleteWorkout(this.exercise.trainingId,this.exercise.id)\n          .subscribe({\n            next: () => this.onSaveComplete(),\n            error: err => this.errorMessage = err\n          });\n      }\n    }\n  }\n\n  saveExercise(): void {\n    if (this.exerciseForm.valid) {\n      if (this.exerciseForm.dirty) {\n        const p = { ...this.exercise, ...this.exerciseForm.value };\n       \n        console.log(p.idExercise, p.category, p.series);\n        \n        if ( this.exercise=== undefined) {\n          p.trainingId =this.workoutId\n          this.workoutService.createWorkout(p)\n            .subscribe({\n              next: () => this.onSaveComplete(),\n              error: err => this.errorMessage = err\n            });\n        } \n        else {\n          this.workoutService.updateWorkout(p)\n            .subscribe({\n              next: () => this.onSaveComplete(),\n              error: err => this.errorMessage = err\n            });\n        }\n      } else {\n        this.onSaveComplete();\n      }\n    } else {\n      this.errorMessage = 'Please correct the validation errors.';\n    }\n  }\n\n  onSaveComplete(): void {\n    // Reset the form to clear the flags\n    this.exerciseForm.reset();\n    this.router.navigate(['/workout']);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}