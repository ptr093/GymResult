{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet WorkoutEditComponent = class WorkoutEditComponent {\n  // private genericValidator: GenericValidator;\n  constructor(fb, route, router, workoutService) {\n    this.fb = fb;\n    this.route = route;\n    this.router = router;\n    this.workoutService = workoutService;\n    this.pageTitle = 'exercise Edit';\n    // Use with the generic validation message class\n    this.displayMessage = {};\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    this.validationMessages = {\n      exerciseName: {\n        required: 'exercise name is required.',\n        minlength: 'exercise name must be at least three characters.',\n        maxlength: 'exercise name cannot exceed 50 characters.'\n      },\n      exerciseCode: {\n        required: 'exercise code is required.'\n      },\n      starRating: {\n        range: 'Rate the exercise between 1 (lowest) and 5 (highest).'\n      }\n    };\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    // this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n\n  ngOnInit() {\n    this.exerciseForm = this.fb.group({\n      category: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\n      Series: [0, Validators.required],\n      Weight: [0, Validators.required]\n    });\n    // Read the exercise Id from the route parameter\n    this.sub = this.route.paramMap.subscribe(params => {\n      const id = +params.get('id');\n      this.getexercise(id);\n    });\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n  // ngAfterViewInit(): void {\n  //   // Watch for the blur event from any input element on the form.\n  //   // This is required because the valueChanges does not provide notification on blur\n  //   const controlBlurs: Observable<any>[] = this.formInputElements\n  //     .map((formControl: ElementRef) => fromEvent(formControl.nativeElement, 'blur'));\n  //   // Merge the blur event observable with the valueChanges observable\n  //   // so we only need to subscribe once.\n  //   merge(this.exerciseForm.valueChanges, ...controlBlurs).pipe(\n  //     debounceTime(800)\n  //   ).subscribe(value => {\n  //     this.displayMessage = this.genericValidator.processMessages(this.exerciseForm);\n  //   });\n  // }\n  getexercise(id) {\n    this.workoutService.getExercises(id).subscribe({\n      next: exercise => this.displayexercise(exercise),\n      error: err => this.errorMessage = err\n    });\n  }\n  displayexercise(exercise) {\n    if (this.exerciseForm) {\n      this.exerciseForm.reset();\n    }\n    this.exercise = exercise;\n    if (this.exercise.id === 0) {\n      this.pageTitle = 'Add exercise';\n    } else {\n      this.pageTitle = 'Edit exercise:';\n    }\n    // Update the data on the form\n    this.exerciseForm.patchValue({\n      category: this.exercise.category,\n      series: this.exercise.series,\n      weight: this.exercise.weight\n    });\n  }\n};\nWorkoutEditComponent = __decorate([Component({\n  selector: 'app-workout-edit',\n  templateUrl: './workout-edit.component.html',\n  styleUrls: ['./workout-edit.component.css']\n})], WorkoutEditComponent);\nexport { WorkoutEditComponent };","map":{"version":3,"mappings":";AAAA,SAAwBA,SAAS,QAAQ,eAAe;AACxD,SAAiCC,UAAU,QAAQ,gBAAgB;AAa5D,IAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAa/B;EAIAC,YAAoBC,EAAe,EACfC,KAAqB,EACrBC,MAAc,EACdC,cAA8B;IAH9B,OAAE,GAAFH,EAAE;IACF,UAAK,GAALC,KAAK;IACL,WAAM,GAANC,MAAM;IACN,mBAAc,GAAdC,cAAc;IAjBlC,cAAS,GAAG,eAAe;IAO3B;IACA,mBAAc,GAA8B,EAAE;IAW5C;IACA;IACA,IAAI,CAACC,kBAAkB,GAAG;MACxBC,YAAY,EAAE;QACZC,QAAQ,EAAE,4BAA4B;QACtCC,SAAS,EAAE,kDAAkD;QAC7DC,SAAS,EAAE;OACZ;MACDC,YAAY,EAAE;QACZH,QAAQ,EAAE;OACX;MACDI,UAAU,EAAE;QACVC,KAAK,EAAE;;KAEV;IAED;IACA;IACA;EACF;;EAEAC,QAAQ;IACN,IAAI,CAACC,YAAY,GAAG,IAAI,CAACb,EAAE,CAACc,KAAK,CAAC;MAChCC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAClB,UAAU,CAACS,QAAQ,EAChBT,UAAU,CAACmB,SAAS,CAAC,CAAC,CAAC,EACvBnB,UAAU,CAACoB,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;MAC7CC,MAAM,EAAE,CAAC,CAAC,EAAErB,UAAU,CAACS,QAAQ,CAAC;MAChCa,MAAM,EAAC,CAAC,CAAC,EAAEtB,UAAU,CAACS,QAAQ;KAE/B,CAAC;IAEF;IACA,IAAI,CAACc,GAAG,GAAG,IAAI,CAACnB,KAAK,CAACoB,QAAQ,CAACC,SAAS,CACtCC,MAAM,IAAG;MACP,MAAMC,EAAE,GAAG,CAACD,MAAM,CAACE,GAAG,CAAC,IAAI,CAAC;MAC5B,IAAI,CAACC,WAAW,CAACF,EAAE,CAAC;IACtB,CAAC,CACF;EACH;EAEAG,WAAW;IACT,IAAI,CAACP,GAAG,CAACQ,WAAW,EAAE;EACxB;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAIAF,WAAW,CAACF,EAAU;IACpB,IAAI,CAACrB,cAAc,CAAC0B,YAAY,CAACL,EAAE,CAAC,CACjCF,SAAS,CAAC;MACTQ,IAAI,EAAGC,QAAmB,IAAK,IAAI,CAACC,eAAe,CAACD,QAAQ,CAAC;MAC7DE,KAAK,EAAEC,GAAG,IAAI,IAAI,CAACC,YAAY,GAAGD;KACnC,CAAC;EACN;EAEAF,eAAe,CAACD,QAAmB;IACjC,IAAI,IAAI,CAAClB,YAAY,EAAE;MACrB,IAAI,CAACA,YAAY,CAACuB,KAAK,EAAE;;IAE3B,IAAI,CAACL,QAAQ,GAAGA,QAAQ;IAExB,IAAI,IAAI,CAACA,QAAQ,CAACP,EAAE,KAAK,CAAC,EAAE;MAC1B,IAAI,CAACa,SAAS,GAAG,cAAc;KAChC,MAAM;MACL,IAAI,CAACA,SAAS,GAAG,gBAAgB;;IAGnC;IACA,IAAI,CAACxB,YAAY,CAACyB,UAAU,CAAC;MAC3BvB,QAAQ,EAAE,IAAI,CAACgB,QAAQ,CAAChB,QAAQ;MAChCwB,MAAM,EAAE,IAAI,CAACR,QAAQ,CAACQ,MAAM;MAC5BC,MAAM,EAAE,IAAI,CAACT,QAAQ,CAACS;KAEvB,CAAC;EAEJ;CAmDD;AAlKY1C,oBAAoB,eALhCF,SAAS,CAAC;EACT6C,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,GACW7C,oBAAoB,CAkKhC;SAlKYA,oBAAoB","names":["Component","Validators","WorkoutEditComponent","constructor","fb","route","router","workoutService","validationMessages","exerciseName","required","minlength","maxlength","exerciseCode","starRating","range","ngOnInit","exerciseForm","group","category","minLength","maxLength","Series","Weight","sub","paramMap","subscribe","params","id","get","getexercise","ngOnDestroy","unsubscribe","getExercises","next","exercise","displayexercise","error","err","errorMessage","reset","pageTitle","patchValue","series","weight","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\repos\\GymResult\\GymAngular\\src\\app\\workout\\workout-edit.component.ts"],"sourcesContent":["import { AfterViewInit, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { WorkoutService } from '../workout.service';\nimport { Exerceise } from './exercise';\n\nimport { Workout } from './workout';\n\n@Component({\n  selector: 'app-workout-edit',\n  templateUrl: './workout-edit.component.html',\n  styleUrls: ['./workout-edit.component.css']\n})\nexport class WorkoutEditComponent  {\n\n\n  pageTitle = 'exercise Edit';\n  errorMessage: string;\n  exerciseForm: FormGroup;\n\n  exercise: Exerceise;\n  private sub: Subscription;\n\n  // Use with the generic validation message class\n  displayMessage: { [key: string]: string } = {};\n  private validationMessages: { [key: string]: { [key: string]: string } };\n  // private genericValidator: GenericValidator;\n\n\n\n  constructor(private fb: FormBuilder,\n              private route: ActivatedRoute,\n              private router: Router,\n              private workoutService: WorkoutService) {\n\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    this.validationMessages = {\n      exerciseName: {\n        required: 'exercise name is required.',\n        minlength: 'exercise name must be at least three characters.',\n        maxlength: 'exercise name cannot exceed 50 characters.'\n      },\n      exerciseCode: {\n        required: 'exercise code is required.'\n      },\n      starRating: {\n        range: 'Rate the exercise between 1 (lowest) and 5 (highest).'\n      }\n    };\n\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    // this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n\n  ngOnInit(): void {\n    this.exerciseForm = this.fb.group({\n      category: ['', [Validators.required,\n                         Validators.minLength(3),\n                         Validators.maxLength(50)]],\n      Series: [0, Validators.required],\n      Weight:[0, Validators.required],\n\n    });\n\n    // Read the exercise Id from the route parameter\n    this.sub = this.route.paramMap.subscribe(\n      params => {\n        const id = +params.get('id');\n        this.getexercise(id);\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.sub.unsubscribe();\n  }\n\n  // ngAfterViewInit(): void {\n  //   // Watch for the blur event from any input element on the form.\n  //   // This is required because the valueChanges does not provide notification on blur\n  //   const controlBlurs: Observable<any>[] = this.formInputElements\n  //     .map((formControl: ElementRef) => fromEvent(formControl.nativeElement, 'blur'));\n\n  //   // Merge the blur event observable with the valueChanges observable\n  //   // so we only need to subscribe once.\n  //   merge(this.exerciseForm.valueChanges, ...controlBlurs).pipe(\n  //     debounceTime(800)\n  //   ).subscribe(value => {\n  //     this.displayMessage = this.genericValidator.processMessages(this.exerciseForm);\n  //   });\n  // }\n\n\n\n  getexercise(id: number): void {\n    this.workoutService.getExercises(id)\n      .subscribe({\n        next: (exercise: Exerceise) => this.displayexercise(exercise),\n        error: err => this.errorMessage = err\n      });\n  }\n\n  displayexercise(exercise: Exerceise): void {\n    if (this.exerciseForm) {\n      this.exerciseForm.reset();\n    }\n    this.exercise = exercise;\n\n    if (this.exercise.id === 0) {\n      this.pageTitle = 'Add exercise';\n    } else {\n      this.pageTitle = 'Edit exercise:';\n    }\n\n    // Update the data on the form\n    this.exerciseForm.patchValue({\n      category: this.exercise.category,\n      series: this.exercise.series,\n      weight: this.exercise.weight,\n    \n    });\n    \n  }\n\n  // deleteexercise(): void {\n  //   if (this.exercise.id === 0) {\n  //     // Don't delete, it was never saved.\n  //     this.onSaveComplete();\n  //   } else {\n  //     if (confirm(`Really delete the exercise: ${this.exercise.exerciseName}?`)) {\n  //       this.exerciseService.deleteexercise(this.exercise.id)\n  //         .subscribe({\n  //           next: () => this.onSaveComplete(),\n  //           error: err => this.errorMessage = err\n  //         });\n  //     }\n  //   }\n  // }\n\n  // saveexercise(): void {\n  //   if (this.exerciseForm.valid) {\n  //     if (this.exerciseForm.dirty) {\n  //       const p = { ...this.exercise, ...this.exerciseForm.value };\n\n  //       if (p.id === 0) {\n  //         this.exerciseService.createexercise(p)\n  //           .subscribe({\n  //             next: () => this.onSaveComplete(),\n  //             error: err => this.errorMessage = err\n  //           });\n  //       } else {\n  //         this.exerciseService.updateexercise(p)\n  //           .subscribe({\n  //             next: () => this.onSaveComplete(),\n  //             error: err => this.errorMessage = err\n  //           });\n  //       }\n  //     } else {\n  //       this.onSaveComplete();\n  //     }\n  //   } else {\n  //     this.errorMessage = 'Please correct the validation errors.';\n  //   }\n  // }\n\n  // onSaveComplete(): void {\n  //   // Reset the form to clear the flags\n  //   this.exerciseForm.reset();\n  //   this.router.navigate(['/exercises']);\n  // }\n    \n\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}