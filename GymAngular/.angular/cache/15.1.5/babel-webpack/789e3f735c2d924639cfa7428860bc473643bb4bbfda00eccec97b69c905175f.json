{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet WorkoutEditComponent = class WorkoutEditComponent {\n  constructor(fb, route, router, productService) {\n    this.fb = fb;\n    this.route = route;\n    this.router = router;\n    this.productService = productService;\n    this.pageTitle = 'Product Edit';\n    // Use with the generic validation message class\n    this.displayMessage = {};\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    this.validationMessages = {\n      category: {\n        required: 'Product name is required.',\n        minlength: 'Product name must be at least three characters.',\n        maxlength: 'Product name cannot exceed 50 characters.'\n      },\n      weight: {\n        required: 'Product code is required.'\n      },\n      series: {\n        range: 'Rate the product between 1 (lowest) and 5 (highest).'\n      }\n    };\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n  ngOnInit() {\n    this.exerciseForm = this.fb.group({\n      category: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\n      weight: ['', Validators.required],\n      series: ['', Validators.required]\n    });\n    // Read the product Id from the route parameter\n    this.sub = this.route.paramMap.subscribe(params => {\n      const id = +params.get('id');\n      this.getExercise(id);\n    });\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n  ngAfterViewInit() {\n    // Watch for the blur event from any input element on the form.\n    // This is required because the valueChanges does not provide notification on blur\n    const controlBlurs = this.formInputElements.map(formControl => fromEvent(formControl.nativeElement, 'blur'));\n    // Merge the blur event observable with the valueChanges observable\n    // so we only need to subscribe once.\n    merge(this.productForm.valueChanges, ...controlBlurs).pipe(debounceTime(800)).subscribe(value => {\n      this.displayMessage = this.genericValidator.processMessages(this.productForm);\n    });\n  }\n  getExercise(id) {\n    this.productService.getExercise(id).subscribe({\n      next: exercise => this.displayProduct(exercise),\n      error: err => this.errorMessage = err\n    });\n  }\n  displayProduct(exercise) {\n    if (this.exerciseForm) {\n      this.exerciseForm.reset();\n    }\n    this.exercise = this.exercise;\n    if (this.exercise.id === 0) {\n      this.pageTitle = 'Dodaj cwiczenie';\n    } else {\n      this.pageTitle = `Edytuj trening: ${this.exercise.category}`;\n    }\n    // Update the data on the form\n    this.exerciseForm.patchValue({\n      category: this.exerciseForm.category,\n      weight: this.exerciseForm.weight,\n      series: this.exerciseForm.series\n    });\n  }\n  deleteProduct() {\n    if (this.exercise.id === 0) {\n      // Don't delete, it was never saved.\n      this.onSaveComplete();\n    } else {\n      if (confirm(`Really delete the product: ${this.exercise.category}?`)) {\n        this.productService.deleteProduct(this.exercise.id).subscribe({\n          next: () => this.onSaveComplete(),\n          error: err => this.errorMessage = err\n        });\n      }\n    }\n  }\n  saveProduct() {\n    if (this.exercise.valid) {\n      if (this.exercise.dirty) {\n        const p = {\n          ...this.exercise,\n          ...this.exercise.value\n        };\n        if (p.id === 0) {\n          this.productService.createProduct(p).subscribe({\n            next: () => this.onSaveComplete(),\n            error: err => this.errorMessage = err\n          });\n        } else {\n          this.productService.updateProduct(p).subscribe({\n            next: () => this.onSaveComplete(),\n            error: err => this.errorMessage = err\n          });\n        }\n      } else {\n        this.onSaveComplete();\n      }\n    } else {\n      this.errorMessage = 'Please correct the validation errors.';\n    }\n  }\n  onSaveComplete() {\n    // Reset the form to clear the flags\n    this.productForm.reset();\n    this.router.navigate(['/products']);\n  }\n};\nWorkoutEditComponent = __decorate([Component({\n  templateUrl: './workout-edit.component.html',\n  styleUrls: ['./workout-edit.component.css']\n})], WorkoutEditComponent);\nexport { WorkoutEditComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","WorkoutEditComponent","constructor","fb","route","router","productService","validationMessages","category","required","minlength","maxlength","weight","series","range","genericValidator","GenericValidator","ngOnInit","exerciseForm","group","minLength","maxLength","sub","paramMap","subscribe","params","id","get","getExercise","ngOnDestroy","unsubscribe","ngAfterViewInit","controlBlurs","formInputElements","map","formControl","fromEvent","nativeElement","merge","productForm","valueChanges","pipe","debounceTime","value","displayMessage","processMessages","next","exercise","displayProduct","error","err","errorMessage","reset","pageTitle","patchValue","deleteProduct","onSaveComplete","confirm","saveProduct","valid","dirty","p","createProduct","updateProduct","navigate","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\repos\\GymResult\\GymAngular\\src\\app\\workout\\workout-edit.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { Exerceise } from './exercise';\n\n@Component({\n\n  templateUrl: './workout-edit.component.html',\n  styleUrls: ['./workout-edit.component.css']\n})\nexport class WorkoutEditComponent {\n\n\n  pageTitle = 'Product Edit';\n  errorMessage: string;\n  exerciseForm: FormGroup;\n\n  exercise: Exerceise;\n  private sub: Subscription;\n\n  // Use with the generic validation message class\n  displayMessage: { [key: string]: string } = {};\n  private validationMessages: { [key: string]: { [key: string]: string } };\n  private genericValidator: GenericValidator;\n\n\n\n  constructor(private fb: FormBuilder,\n              private route: ActivatedRoute,\n              private router: Router,\n              private productService: ProductService) {\n\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    this.validationMessages = {\n      category: {\n        required: 'Product name is required.',\n        minlength: 'Product name must be at least three characters.',\n        maxlength: 'Product name cannot exceed 50 characters.'\n      },\n      weight: {\n        required: 'Product code is required.'\n      },\n      series: {\n        range: 'Rate the product between 1 (lowest) and 5 (highest).'\n      }\n    };\n\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n\n  ngOnInit(): void {\n    this.exerciseForm = this.fb.group({\n      category: ['', [Validators.required,\n                         Validators.minLength(3),\n                         Validators.maxLength(50)]],\n      weight: ['', Validators.required],\n      series: ['', Validators.required]\n   \n    });\n\n    // Read the product Id from the route parameter\n    this.sub = this.route.paramMap.subscribe(\n      params => {\n        const id = +params.get('id');\n        this.getExercise(id);\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.sub.unsubscribe();\n  }\n\n  ngAfterViewInit(): void {\n    // Watch for the blur event from any input element on the form.\n    // This is required because the valueChanges does not provide notification on blur\n    const controlBlurs: Observable<any>[] = this.formInputElements\n      .map((formControl: ElementRef) => fromEvent(formControl.nativeElement, 'blur'));\n\n    // Merge the blur event observable with the valueChanges observable\n    // so we only need to subscribe once.\n    merge(this.productForm.valueChanges, ...controlBlurs).pipe(\n      debounceTime(800)\n    ).subscribe(value => {\n      this.displayMessage = this.genericValidator.processMessages(this.productForm);\n    });\n  }\n\n  \n\n\n  getExercise(id: number): void {\n    this.productService.getExercise(id)\n      .subscribe({\n        next: (exercise: Exerceise) => this.displayProduct(exercise),\n        error: (err: string) => this.errorMessage = err\n      });\n  }\n\n  displayProduct(exercise: Exerceise): void {\n    if (this.exerciseForm) {\n      this.exerciseForm.reset();\n    }\n    this.exercise = this.exercise;\n\n    if (this.exercise.id === 0) {\n      this.pageTitle = 'Dodaj cwiczenie';\n    } else {\n      this.pageTitle = `Edytuj trening: ${this.exercise.category}`;\n    }\n\n    // Update the data on the form\n    this.exerciseForm.patchValue({\n      category: this.exerciseForm.category,\n      weight: this.exerciseForm.weight,\n      series: this.exerciseForm.series,\n     \n    });\n   \n  }\n\n  deleteProduct(): void {\n    if (this.exercise.id === 0) {\n      // Don't delete, it was never saved.\n      this.onSaveComplete();\n    } else {\n      if (confirm(`Really delete the product: ${this.exercise.category}?`)) {\n        this.productService.deleteProduct(this.exercise.id)\n          .subscribe({\n            next: () => this.onSaveComplete(),\n            error: err => this.errorMessage = err\n          });\n      }\n    }\n  }\n\n  saveProduct(): void {\n    if (this.exercise.valid) {\n      if (this.exercise.dirty) {\n        const p = { ...this.exercise, ...this.exercise.value };\n\n        if (p.id === 0) {\n          this.productService.createProduct(p)\n            .subscribe({\n              next: () => this.onSaveComplete(),\n              error: err => this.errorMessage = err\n            });\n        } else {\n          this.productService.updateProduct(p)\n            .subscribe({\n              next: () => this.onSaveComplete(),\n              error: err => this.errorMessage = err\n            });\n        }\n      } else {\n        this.onSaveComplete();\n      }\n    } else {\n      this.errorMessage = 'Please correct the validation errors.';\n    }\n  }\n\n  onSaveComplete(): void {\n    // Reset the form to clear the flags\n    this.productForm.reset();\n    this.router.navigate(['/products']);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}