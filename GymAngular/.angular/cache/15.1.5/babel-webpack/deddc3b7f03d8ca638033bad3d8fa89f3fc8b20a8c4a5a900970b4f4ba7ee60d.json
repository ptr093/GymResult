{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { debounceTime, fromEvent, merge } from 'rxjs';\nimport { GenericValidator } from '../generic-validator';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../workout.service\";\nimport * as i4 from \"@angular/common\";\nfunction WorkoutEditComponent_div_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r0.errorMessage, \" \");\n  }\n}\nconst _c0 = function () {\n  return [\"/workout\"];\n};\nexport class WorkoutEditComponent {\n  constructor(fb, route, router, workoutService) {\n    this.fb = fb;\n    this.route = route;\n    this.router = router;\n    this.workoutService = workoutService;\n    this.pageTitle = 'Product Edit';\n    // Use with the generic validation message class\n    this.displayMessage = {};\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    this.validationMessages = {\n      productName: {\n        required: 'Product name is required.',\n        minlength: 'Product name must be at least three characters.',\n        maxlength: 'Product name cannot exceed 50 characters.'\n      },\n      productCode: {\n        required: 'Product code is required.'\n      },\n      starRating: {\n        range: 'Rate the product between 1 (lowest) and 5 (highest).'\n      }\n    };\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n  ngOnInit() {\n    this.exerciseForm = this.fb.group({\n      category: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\n      weight: ['', Validators.required],\n      series: ['', Va.range(1, 5)],\n      tags: this.fb.array([]),\n      description: ''\n    });\n    // Read the product Id from the route parameter\n    this.sub = this.route.paramMap.subscribe(params => {\n      const id = +params.get('id');\n      this.getProduct(id);\n    });\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n  ngAfterViewInit() {\n    // Watch for the blur event from any input element on the form.\n    // This is required because the valueChanges does not provide notification on blur\n    const controlBlurs = this.formInputElements.map(formControl => fromEvent(formControl.nativeElement, 'blur'));\n    // Merge the blur event observable with the valueChanges observable\n    // so we only need to subscribe once.\n    merge(this.productForm.valueChanges, ...controlBlurs).pipe(debounceTime(800)).subscribe(value => {\n      this.displayMessage = this.genericValidator.processMessages(this.productForm);\n    });\n  }\n  addTag() {\n    this.tags.push(new FormControl());\n  }\n  deleteTag(index) {\n    this.tags.removeAt(index);\n    this.tags.markAsDirty();\n  }\n  getProduct(id) {\n    this.productService.getProduct(id).subscribe({\n      next: product => this.displayProduct(product),\n      error: err => this.errorMessage = err\n    });\n  }\n  displayProduct(product) {\n    if (this.productForm) {\n      this.productForm.reset();\n    }\n    this.product = product;\n    if (this.product.id === 0) {\n      this.pageTitle = 'Add Product';\n    } else {\n      this.pageTitle = `Edit Product: ${this.product.productName}`;\n    }\n    // Update the data on the form\n    this.productForm.patchValue({\n      productName: this.product.productName,\n      productCode: this.product.productCode,\n      starRating: this.product.starRating,\n      description: this.product.description\n    });\n    this.productForm.setControl('tags', this.fb.array(this.product.tags || []));\n  }\n  deleteProduct() {\n    if (this.product.id === 0) {\n      // Don't delete, it was never saved.\n      this.onSaveComplete();\n    } else {\n      if (confirm(`Really delete the product: ${this.product.productName}?`)) {\n        this.productService.deleteProduct(this.product.id).subscribe({\n          next: () => this.onSaveComplete(),\n          error: err => this.errorMessage = err\n        });\n      }\n    }\n  }\n  saveProduct() {\n    if (this.productForm.valid) {\n      if (this.productForm.dirty) {\n        const p = {\n          ...this.product,\n          ...this.productForm.value\n        };\n        if (p.id === 0) {\n          this.productService.createProduct(p).subscribe({\n            next: () => this.onSaveComplete(),\n            error: err => this.errorMessage = err\n          });\n        } else {\n          this.productService.updateProduct(p).subscribe({\n            next: () => this.onSaveComplete(),\n            error: err => this.errorMessage = err\n          });\n        }\n      } else {\n        this.onSaveComplete();\n      }\n    } else {\n      this.errorMessage = 'Please correct the validation errors.';\n    }\n  }\n  onSaveComplete() {\n    // Reset the form to clear the flags\n    this.productForm.reset();\n    this.router.navigate(['/products']);\n  }\n}\nWorkoutEditComponent.ɵfac = function WorkoutEditComponent_Factory(t) {\n  return new (t || WorkoutEditComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.WorkoutService));\n};\nWorkoutEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: WorkoutEditComponent,\n  selectors: [[\"ng-component\"]],\n  decls: 29,\n  vars: 6,\n  consts: [[1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\", \"row\", \"mb-2\"], [\"for\", \"productNameId\", 1, \"col-md-2\", \"col-form-label\"], [1, \"col-md-8\"], [\"id\", \"productNameId\", \"type\", \"text\", \"placeholder\", \"Cwiczenie (wymagane pole)\", \"formControlName\", \"category\", 1, \"form-control\"], [\"id\", \"productNameId\", \"type\", \"text\", \"placeholder\", \"Ci\\u0119\\u017Car (wymagane pole)\", \"formControlName\", \"weight\", 1, \"form-control\"], [\"for\", \"productCodeId\", 1, \"col-md-2\", \"col-form-label\"], [\"id\", \"productCodeId\", \"type\", \"text\", \"placeholder\", \"seria (wymagane pole)\", \"formControlName\", \"series\", 1, \"form-control\"], [1, \"offset-md-2\", \"col-md-4\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mr-3\", 2, \"width\", \"80px\", 3, \"disabled\"], [\"type\", \"button\", \"title\", \"Anuluj edytowanie\", 1, \"btn\", \"btn-outline-secondary\", \"mr-3\", 2, \"width\", \"80px\", 3, \"routerLink\"], [\"type\", \"button\", \"title\", \"Usu\\u0144 trening\", 1, \"btn\", \"btn-outline-warning\", 2, \"width\", \"80px\", 3, \"click\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [1, \"alert\", \"alert-danger\"]],\n  template: function WorkoutEditComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 2)(4, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function WorkoutEditComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.saveExercise();\n      });\n      i0.ɵɵelementStart(5, \"div\", 4)(6, \"label\", 5);\n      i0.ɵɵtext(7, \"Cwiczenie\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 6);\n      i0.ɵɵelement(9, \"input\", 7);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"div\", 4)(11, \"label\", 5);\n      i0.ɵɵtext(12, \"Ci\\u0119\\u017Car\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\", 6);\n      i0.ɵɵelement(14, \"input\", 8);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"div\", 4)(16, \"label\", 9);\n      i0.ɵɵtext(17, \"Seria\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"div\", 6);\n      i0.ɵɵelement(19, \"input\", 10);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(20, \"div\", 4)(21, \"div\", 11)(22, \"button\", 12);\n      i0.ɵɵtext(23, \" Save \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"button\", 13);\n      i0.ɵɵtext(25, \" Anuluj \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(26, \"button\", 14);\n      i0.ɵɵlistener(\"click\", function WorkoutEditComponent_Template_button_click_26_listener() {\n        return ctx.deleteExercise();\n      });\n      i0.ɵɵtext(27, \" Delete \");\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵtemplate(28, WorkoutEditComponent_div_28_Template, 2, 1, \"div\", 15);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.pageTitle, \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.exerciseForm);\n      i0.ɵɵadvance(18);\n      i0.ɵɵproperty(\"disabled\", !ctx.exerciseForm.valid);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(5, _c0));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n    }\n  },\n  dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i2.RouterLink],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","debounceTime","fromEvent","merge","GenericValidator","i0","WorkoutEditComponent","constructor","fb","route","router","workoutService","validationMessages","productName","required","minlength","maxlength","productCode","starRating","range","genericValidator","ngOnInit","exerciseForm","group","category","minLength","maxLength","weight","series","Va","tags","array","description","sub","paramMap","subscribe","params","id","get","getProduct","ngOnDestroy","unsubscribe","ngAfterViewInit","controlBlurs","formInputElements","map","formControl","nativeElement","productForm","valueChanges","pipe","value","displayMessage","processMessages","addTag","push","FormControl","deleteTag","index","removeAt","markAsDirty","productService","next","product","displayProduct","error","err","errorMessage","reset","pageTitle","patchValue","setControl","deleteProduct","onSaveComplete","confirm","saveProduct","valid","dirty","p","createProduct","updateProduct","navigate","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\repos\\GymResult\\GymAngular\\src\\app\\workout\\workout-edit.component.ts","D:\\repos\\GymResult\\GymAngular\\src\\app\\workout\\workout-edit.component.html"],"sourcesContent":["import { AfterViewInit, Component, ElementRef, OnDestroy, OnInit, ViewChildren } from '@angular/core';\nimport { FormBuilder, FormControlName, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { debounceTime, fromEvent, merge, Observable, Subscription } from 'rxjs';\nimport { GenericValidator } from '../generic-validator';\n\nimport { WorkoutService } from '../workout.service';\nimport { Exerceise } from './exercise';\n\n@Component({\n\n  templateUrl: './workout-edit.component.html',\n  styleUrls: ['./workout-edit.component.css']\n})\nexport class WorkoutEditComponent implements  OnInit, OnDestroy  {\n\n\n  pageTitle = 'Product Edit';\n  errorMessage: string;\n  exerciseForm: FormGroup;\n\n  exercise: Exerceise;\n  private sub: Subscription;\n\n  // Use with the generic validation message class\n  displayMessage: { [key: string]: string } = {};\n  private validationMessages: { [key: string]: { [key: string]: string } };\n  private genericValidator: GenericValidator;\n\n\n\n  constructor(private fb: FormBuilder,\n              private route: ActivatedRoute,\n              private router: Router,\n              private workoutService: WorkoutService) {\n\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    this.validationMessages = {\n      productName: {\n        required: 'Product name is required.',\n        minlength: 'Product name must be at least three characters.',\n        maxlength: 'Product name cannot exceed 50 characters.'\n      },\n      productCode: {\n        required: 'Product code is required.'\n      },\n      starRating: {\n        range: 'Rate the product between 1 (lowest) and 5 (highest).'\n      }\n    };\n\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n\n  ngOnInit(): void {\n    this.exerciseForm = this.fb.group({\n      category: ['', [Validators.required,\n                         Validators.minLength(3),\n                         Validators.maxLength(50)]],\n      weight: ['', Validators.required],\n      series: ['', Va.range(1, 5)],\n      tags: this.fb.array([]),\n      description: ''\n    });\n\n    // Read the product Id from the route parameter\n    this.sub = this.route.paramMap.subscribe(\n      params => {\n        const id = +params.get('id');\n        this.getProduct(id);\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.sub.unsubscribe();\n  }\n\n  ngAfterViewInit(): void {\n    // Watch for the blur event from any input element on the form.\n    // This is required because the valueChanges does not provide notification on blur\n    const controlBlurs: Observable<any>[] = this.formInputElements\n      .map((formControl: ElementRef) => fromEvent(formControl.nativeElement, 'blur'));\n\n    // Merge the blur event observable with the valueChanges observable\n    // so we only need to subscribe once.\n    merge(this.productForm.valueChanges, ...controlBlurs).pipe(\n      debounceTime(800)\n    ).subscribe(value => {\n      this.displayMessage = this.genericValidator.processMessages(this.productForm);\n    });\n  }\n\n  addTag(): void {\n    this.tags.push(new FormControl());\n  }\n\n  deleteTag(index: number): void {\n    this.tags.removeAt(index);\n    this.tags.markAsDirty();\n  }\n\n  getProduct(id: number): void {\n    this.productService.getProduct(id)\n      .subscribe({\n        next: (product: Product) => this.displayProduct(product),\n        error: err => this.errorMessage = err\n      });\n  }\n\n  displayProduct(product: Product): void {\n    if (this.productForm) {\n      this.productForm.reset();\n    }\n    this.product = product;\n\n    if (this.product.id === 0) {\n      this.pageTitle = 'Add Product';\n    } else {\n      this.pageTitle = `Edit Product: ${this.product.productName}`;\n    }\n\n    // Update the data on the form\n    this.productForm.patchValue({\n      productName: this.product.productName,\n      productCode: this.product.productCode,\n      starRating: this.product.starRating,\n      description: this.product.description\n    });\n    this.productForm.setControl('tags', this.fb.array(this.product.tags || []));\n  }\n\n  deleteProduct(): void {\n    if (this.product.id === 0) {\n      // Don't delete, it was never saved.\n      this.onSaveComplete();\n    } else {\n      if (confirm(`Really delete the product: ${this.product.productName}?`)) {\n        this.productService.deleteProduct(this.product.id)\n          .subscribe({\n            next: () => this.onSaveComplete(),\n            error: err => this.errorMessage = err\n          });\n      }\n    }\n  }\n\n  saveProduct(): void {\n    if (this.productForm.valid) {\n      if (this.productForm.dirty) {\n        const p = { ...this.product, ...this.productForm.value };\n\n        if (p.id === 0) {\n          this.productService.createProduct(p)\n            .subscribe({\n              next: () => this.onSaveComplete(),\n              error: err => this.errorMessage = err\n            });\n        } else {\n          this.productService.updateProduct(p)\n            .subscribe({\n              next: () => this.onSaveComplete(),\n              error: err => this.errorMessage = err\n            });\n        }\n      } else {\n        this.onSaveComplete();\n      }\n    } else {\n      this.errorMessage = 'Please correct the validation errors.';\n    }\n  }\n\n  onSaveComplete(): void {\n    // Reset the form to clear the flags\n    this.productForm.reset();\n    this.router.navigate(['/products']);\n  }\n}\n","<div class=\"card\">\n    <div class=\"card-header\">\n      {{pageTitle}}\n    </div>\n  \n    <div class=\"card-body\">\n      <form novalidate\n            (ngSubmit)=\"saveExercise()\"\n            [formGroup]=\"exerciseForm\">\n\n            <div class=\"form-group row mb-2\">\n                <label class=\"col-md-2 col-form-label\"\n                       for=\"productNameId\">Cwiczenie</label>\n                <div class=\"col-md-8\">\n                  <input class=\"form-control\"\n                         id=\"productNameId\"\n                         type=\"text\"\n                         placeholder=\"Cwiczenie (wymagane pole)\"\n                         formControlName=\"category\"\n                         />\n             \n                </div>\n              </div>\n  \n        <div class=\"form-group row mb-2\">\n          <label class=\"col-md-2 col-form-label\"\n                 for=\"productNameId\">Ciężar</label>\n          <div class=\"col-md-8\">\n            <input class=\"form-control\"\n                   id=\"productNameId\"\n                   type=\"text\"\n                   placeholder=\"Ciężar (wymagane pole)\"\n                   formControlName=\"weight\"\n                   />\n           \n          </div>\n        </div>\n  \n        <div class=\"form-group row mb-2\">\n          <label class=\"col-md-2 col-form-label\"\n                 for=\"productCodeId\">Seria</label>\n          <div class=\"col-md-8\">\n            <input class=\"form-control\"\n                   id=\"productCodeId\"\n                   type=\"text\"\n                   placeholder=\"seria (wymagane pole)\"\n                   formControlName=\"series\"\n                    />\n           \n          </div>\n        </div>\n  \n       \n  \n        \n  \n       \n        \n  \n        <div class=\"form-group row mb-2\">\n          <div class=\"offset-md-2 col-md-4\">\n            <button class=\"btn btn-primary mr-3\"\n                    style=\"width:80px;\"\n                    type=\"submit\"\n                   \n                    [disabled]=\"!exerciseForm.valid\">\n              Save\n            </button>\n            <button class=\"btn btn-outline-secondary mr-3\"\n                    style=\"width:80px;\"\n                    type=\"button\"\n                    title=\"Anuluj edytowanie\"\n                    [routerLink]=\"['/workout']\">\n              Anuluj\n            </button>\n            <button class=\"btn btn-outline-warning\"\n                    style=\"width:80px\"\n                    type=\"button\"\n                    title=\"Usuń trening\"\n                    (click)=\"deleteExercise()\">\n              Delete\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  \n    <div class=\"alert alert-danger\"\n         *ngIf=\"errorMessage\">{{errorMessage}}\n    </div>\n  </div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}