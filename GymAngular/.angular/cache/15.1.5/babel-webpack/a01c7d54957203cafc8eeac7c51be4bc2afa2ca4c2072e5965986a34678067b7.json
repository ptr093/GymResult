{"ast":null,"code":"// Generic validator for Reactive forms\n// Implemented as a class, not a service, so it can retain state for multiple forms.\nimport { FormGroup } from \"@angular/forms\";\n// NOTE: This validator does NOT support validation of controls or groups within a FormArray.\nexport class GenericValidator {\n  // Provide the set of valid validation messages\n  // Stucture:\n  // controlName1: {\n  //     validationRuleName1: 'Validation Message.',\n  //     validationRuleName2: 'Validation Message.'\n  // },\n  // controlName2: {\n  //     validationRuleName1: 'Validation Message.',\n  //     validationRuleName2: 'Validation Message.'\n  // }\n  constructor(validationMessages) {\n    this.validationMessages = validationMessages;\n  }\n  // Processes each control within a FormGroup\n  // And returns a set of validation messages to display\n  // Structure\n  // controlName1: 'Validation Message.',\n  // controlName2: 'Validation Message.'\n  processMessages(container) {\n    const messages = {};\n    for (const controlKey in container.controls) {\n      if (container.controls.hasOwnProperty(controlKey)) {\n        const c = container.controls[controlKey];\n        // If it is a FormGroup, process its child controls.\n        if (c instanceof FormGroup) {\n          const childMessages = this.processMessages(c);\n          Object.assign(messages, childMessages);\n        } else {\n          // Only validate if there are validation messages for the control\n          if (this.validationMessages[controlKey]) {\n            messages[controlKey] = '';\n            if ((c.dirty || c.touched) && c.errors) {\n              Object.keys(c.errors).map(messageKey => {\n                if (this.validationMessages[controlKey][messageKey]) {\n                  messages[controlKey] += this.validationMessages[controlKey][messageKey] + ' ';\n                }\n              });\n            }\n          }\n        }\n      }\n    }\n    return messages;\n  }\n  getErrorCount(container) {\n    let errorCount = 0;\n    for (const controlKey in container.controls) {\n      if (container.controls.hasOwnProperty(controlKey)) {\n        if (container.controls[controlKey].errors) {\n          errorCount += Object.keys(container.controls[controlKey].errors).length;\n          console.log(errorCount);\n        }\n      }\n    }\n    return errorCount;\n  }\n}","map":{"version":3,"mappings":"AAEA;AACA;AAEA,SAASA,SAAS,QAAQ,gBAAgB;AAE1C;AACA,OAAM,MAAOC,gBAAgB;EAE3B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,YAAoBC,kBAAgE;IAAhE,uBAAkB,GAAlBA,kBAAkB;EAEtC;EAEA;EACA;EACA;EACA;EACA;EACAC,eAAe,CAACC,SAAoB;IAClC,MAAMC,QAAQ,GAAG,EAAE;IACnB,KAAK,MAAMC,UAAU,IAAIF,SAAS,CAACG,QAAQ,EAAE;MAC3C,IAAIH,SAAS,CAACG,QAAQ,CAACC,cAAc,CAACF,UAAU,CAAC,EAAE;QACjD,MAAMG,CAAC,GAAGL,SAAS,CAACG,QAAQ,CAACD,UAAU,CAAC;QACxC;QACA,IAAIG,CAAC,YAAYV,SAAS,EAAE;UAC1B,MAAMW,aAAa,GAAG,IAAI,CAACP,eAAe,CAACM,CAAC,CAAC;UAC7CE,MAAM,CAACC,MAAM,CAACP,QAAQ,EAAEK,aAAa,CAAC;SACvC,MAAM;UACL;UACA,IAAI,IAAI,CAACR,kBAAkB,CAACI,UAAU,CAAC,EAAE;YACvCD,QAAQ,CAACC,UAAU,CAAC,GAAG,EAAE;YACzB,IAAI,CAACG,CAAC,CAACI,KAAK,IAAIJ,CAAC,CAACK,OAAO,KAAKL,CAAC,CAACM,MAAM,EAAE;cACtCJ,MAAM,CAACK,IAAI,CAACP,CAAC,CAACM,MAAM,CAAC,CAACE,GAAG,CAACC,UAAU,IAAG;gBACrC,IAAI,IAAI,CAAChB,kBAAkB,CAACI,UAAU,CAAC,CAACY,UAAU,CAAC,EAAE;kBACnDb,QAAQ,CAACC,UAAU,CAAC,IAAI,IAAI,CAACJ,kBAAkB,CAACI,UAAU,CAAC,CAACY,UAAU,CAAC,GAAG,GAAG;;cAEjF,CAAC,CAAC;;;;;;IAMZ,OAAOb,QAAQ;EACjB;EAEAc,aAAa,CAACf,SAAoB;IAChC,IAAIgB,UAAU,GAAG,CAAC;IAClB,KAAK,MAAMd,UAAU,IAAIF,SAAS,CAACG,QAAQ,EAAE;MAC3C,IAAIH,SAAS,CAACG,QAAQ,CAACC,cAAc,CAACF,UAAU,CAAC,EAAE;QACjD,IAAIF,SAAS,CAACG,QAAQ,CAACD,UAAU,CAAC,CAACS,MAAM,EAAE;UACzCK,UAAU,IAAIT,MAAM,CAACK,IAAI,CAACZ,SAAS,CAACG,QAAQ,CAACD,UAAU,CAAC,CAACS,MAAM,CAAC,CAACM,MAAM;UACvEC,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC;;;;IAI7B,OAAOA,UAAU;EACnB","names":["FormGroup","GenericValidator","constructor","validationMessages","processMessages","container","messages","controlKey","controls","hasOwnProperty","c","childMessages","Object","assign","dirty","touched","errors","keys","map","messageKey","getErrorCount","errorCount","length","console","log"],"sourceRoot":"","sources":["D:\\repos\\GymResult\\GymAngular\\src\\app\\generic-validator.ts"],"sourcesContent":["\r\n\r\n// Generic validator for Reactive forms\r\n// Implemented as a class, not a service, so it can retain state for multiple forms.\r\n\r\nimport { FormGroup } from \"@angular/forms\";\r\n\r\n// NOTE: This validator does NOT support validation of controls or groups within a FormArray.\r\nexport class GenericValidator {\r\n\r\n  // Provide the set of valid validation messages\r\n  // Stucture:\r\n  // controlName1: {\r\n  //     validationRuleName1: 'Validation Message.',\r\n  //     validationRuleName2: 'Validation Message.'\r\n  // },\r\n  // controlName2: {\r\n  //     validationRuleName1: 'Validation Message.',\r\n  //     validationRuleName2: 'Validation Message.'\r\n  // }\r\n  constructor(private validationMessages: { [key: string]: { [key: string]: string } }) {\r\n\r\n  }\r\n\r\n  // Processes each control within a FormGroup\r\n  // And returns a set of validation messages to display\r\n  // Structure\r\n  // controlName1: 'Validation Message.',\r\n  // controlName2: 'Validation Message.'\r\n  processMessages(container: FormGroup): { [key: string]: string } {\r\n    const messages = {};\r\n    for (const controlKey in container.controls) {\r\n      if (container.controls.hasOwnProperty(controlKey)) {\r\n        const c = container.controls[controlKey];\r\n        // If it is a FormGroup, process its child controls.\r\n        if (c instanceof FormGroup) {\r\n          const childMessages = this.processMessages(c);\r\n          Object.assign(messages, childMessages);\r\n        } else {\r\n          // Only validate if there are validation messages for the control\r\n          if (this.validationMessages[controlKey]) {\r\n            messages[controlKey] = '';\r\n            if ((c.dirty || c.touched) && c.errors) {\r\n              Object.keys(c.errors).map(messageKey => {\r\n                if (this.validationMessages[controlKey][messageKey]) {\r\n                  messages[controlKey] += this.validationMessages[controlKey][messageKey] + ' ';\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return messages;\r\n  }\r\n\r\n  getErrorCount(container: FormGroup): number {\r\n    let errorCount = 0;\r\n    for (const controlKey in container.controls) {\r\n      if (container.controls.hasOwnProperty(controlKey)) {\r\n        if (container.controls[controlKey].errors) {\r\n          errorCount += Object.keys(container.controls[controlKey].errors).length;\r\n          console.log(errorCount);\r\n        }\r\n      }\r\n    }\r\n    return errorCount;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}