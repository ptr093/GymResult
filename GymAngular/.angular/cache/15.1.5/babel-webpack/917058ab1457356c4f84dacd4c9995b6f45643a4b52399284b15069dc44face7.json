{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../workout.service\";\nimport * as i4 from \"@angular/common\";\nfunction WorkoutEditComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"label\", 25);\n    i0.ɵɵtext(2, \"Tag\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 6);\n    i0.ɵɵelement(4, \"input\", 26);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 27);\n    i0.ɵɵlistener(\"click\", function WorkoutEditComponent_div_27_Template_button_click_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const i_r3 = restoredCtx.index;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.deleteTag(i_r3));\n    });\n    i0.ɵɵtext(6, \"Delete Tag \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const i_r3 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"for\", i_r3);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"id\", i_r3)(\"formControlName\", i_r3);\n  }\n}\nfunction WorkoutEditComponent_div_47_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 28);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r1.errorMessage, \" \");\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nconst _c1 = function () {\n  return [\"/products\"];\n};\nexport class WorkoutEditComponent {\n  // private genericValidator: GenericValidator;\n  constructor(fb, route, router, workoutService) {\n    this.fb = fb;\n    this.route = route;\n    this.router = router;\n    this.workoutService = workoutService;\n    this.pageTitle = 'exercise Edit';\n    // Use with the generic validation message class\n    this.displayMessage = {};\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    this.validationMessages = {\n      exerciseName: {\n        required: 'exercise name is required.',\n        minlength: 'exercise name must be at least three characters.',\n        maxlength: 'exercise name cannot exceed 50 characters.'\n      },\n      exerciseCode: {\n        required: 'exercise code is required.'\n      },\n      starRating: {\n        range: 'Rate the exercise between 1 (lowest) and 5 (highest).'\n      }\n    };\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    // this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n\n  ngOnInit() {\n    this.exerciseForm = this.fb.group({\n      exerciseName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\n      exerciseCode: ['', Validators.required],\n      starRating: ['', NumberValidators.range(1, 5)],\n      tags: this.fb.array([]),\n      description: ''\n    });\n    // Read the exercise Id from the route parameter\n    this.sub = this.route.paramMap.subscribe(params => {\n      const id = +params.get('id');\n      this.getexercise(id);\n    });\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n  ngAfterViewInit() {\n    // Watch for the blur event from any input element on the form.\n    // This is required because the valueChanges does not provide notification on blur\n    const controlBlurs = this.formInputElements.map(formControl => fromEvent(formControl.nativeElement, 'blur'));\n    // Merge the blur event observable with the valueChanges observable\n    // so we only need to subscribe once.\n    merge(this.exerciseForm.valueChanges, ...controlBlurs).pipe(debounceTime(800)).subscribe(value => {\n      this.displayMessage = this.genericValidator.processMessages(this.exerciseForm);\n    });\n  }\n  addTag() {\n    this.tags.push(new FormControl());\n  }\n  deleteTag(index) {\n    this.tags.removeAt(index);\n    this.tags.markAsDirty();\n  }\n  getexercise(id) {\n    this.exerciseService.getexercise(id).subscribe({\n      next: exercise => this.displayexercise(exercise),\n      error: err => this.errorMessage = err\n    });\n  }\n  displayexercise(exercise) {\n    if (this.exerciseForm) {\n      this.exerciseForm.reset();\n    }\n    this.exercise = exercise;\n    if (this.exercise.id === 0) {\n      this.pageTitle = 'Add exercise';\n    } else {\n      this.pageTitle = `Edit exercise: ${this.exercise.exerciseName}`;\n    }\n    // Update the data on the form\n    this.exerciseForm.patchValue({\n      exerciseName: this.exercise.exerciseName,\n      exerciseCode: this.exercise.exerciseCode,\n      starRating: this.exercise.starRating,\n      description: this.exercise.description\n    });\n    this.exerciseForm.setControl('tags', this.fb.array(this.exercise.tags || []));\n  }\n  deleteexercise() {\n    if (this.exercise.id === 0) {\n      // Don't delete, it was never saved.\n      this.onSaveComplete();\n    } else {\n      if (confirm(`Really delete the exercise: ${this.exercise.exerciseName}?`)) {\n        this.exerciseService.deleteexercise(this.exercise.id).subscribe({\n          next: () => this.onSaveComplete(),\n          error: err => this.errorMessage = err\n        });\n      }\n    }\n  }\n  saveexercise() {\n    if (this.exerciseForm.valid) {\n      if (this.exerciseForm.dirty) {\n        const p = {\n          ...this.exercise,\n          ...this.exerciseForm.value\n        };\n        if (p.id === 0) {\n          this.exerciseService.createexercise(p).subscribe({\n            next: () => this.onSaveComplete(),\n            error: err => this.errorMessage = err\n          });\n        } else {\n          this.exerciseService.updateexercise(p).subscribe({\n            next: () => this.onSaveComplete(),\n            error: err => this.errorMessage = err\n          });\n        }\n      } else {\n        this.onSaveComplete();\n      }\n    } else {\n      this.errorMessage = 'Please correct the validation errors.';\n    }\n  }\n  onSaveComplete() {\n    // Reset the form to clear the flags\n    this.exerciseForm.reset();\n    this.router.navigate(['/exercises']);\n  }\n}\nWorkoutEditComponent.ɵfac = function WorkoutEditComponent_Factory(t) {\n  return new (t || WorkoutEditComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.WorkoutService));\n};\nWorkoutEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: WorkoutEditComponent,\n  selectors: [[\"app-workout-edit\"]],\n  decls: 48,\n  vars: 24,\n  consts: [[1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\", \"row\", \"mb-2\"], [\"for\", \"productNameId\", 1, \"col-md-2\", \"col-form-label\"], [1, \"col-md-8\"], [\"id\", \"productNameId\", \"type\", \"text\", \"placeholder\", \"Name (required)\", \"formControlName\", \"productName\", 1, \"form-control\", 3, \"ngClass\"], [1, \"invalid-feedback\"], [\"for\", \"productCodeId\", 1, \"col-md-2\", \"col-form-label\"], [\"id\", \"productCodeId\", \"type\", \"text\", \"placeholder\", \"Code (required)\", \"formControlName\", \"productCode\", 1, \"form-control\", 3, \"ngClass\"], [\"for\", \"starRatingId\", 1, \"col-md-2\", \"col-form-label\"], [\"id\", \"starRatingId\", \"type\", \"text\", \"placeholder\", \"Rating (1-5)\", \"formControlName\", \"starRating\", 1, \"form-control\", 3, \"ngClass\"], [\"formArrayName\", \"tags\"], [\"class\", \"form-group row mb-2\", 4, \"ngFor\", \"ngForOf\"], [1, \"row\"], [1, \"col-md-2\", \"mb-2\"], [\"type\", \"button\", \"title\", \"Add a search tag\", 1, \"btn\", \"btn-outline-secondary\", \"btn-sm\", 3, \"click\"], [\"for\", \"descriptionId\", 1, \"col-md-2\", \"col-form-label\"], [\"id\", \"descriptionId\", \"placeholder\", \"Description\", \"rows\", \"3\", \"formControlName\", \"description\", 1, \"form-control\", 3, \"ngClass\"], [1, \"offset-md-2\", \"col-md-4\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mr-3\", 2, \"width\", \"80px\", 3, \"title\", \"disabled\"], [\"type\", \"button\", \"title\", \"Cancel your edits\", 1, \"btn\", \"btn-outline-secondary\", \"mr-3\", 2, \"width\", \"80px\", 3, \"routerLink\"], [\"type\", \"button\", \"title\", \"Delete this product\", 1, \"btn\", \"btn-outline-warning\", 2, \"width\", \"80px\", 3, \"click\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [1, \"col-md-2\", \"col-form-label\"], [\"type\", \"text\", \"placeholder\", \"Tag\", 1, \"form-control\", 3, \"id\", \"formControlName\"], [\"type\", \"button\", \"title\", \"Delete this search tag\", 1, \"col-md-1\", \"btn\", \"btn-outline-warning\", \"btn-sm\", 3, \"click\"], [1, \"alert\", \"alert-danger\"]],\n  template: function WorkoutEditComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 2)(4, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function WorkoutEditComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.saveProduct();\n      });\n      i0.ɵɵelementStart(5, \"div\", 4)(6, \"label\", 5);\n      i0.ɵɵtext(7, \"Product Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 6);\n      i0.ɵɵelement(9, \"input\", 7);\n      i0.ɵɵelementStart(10, \"span\", 8);\n      i0.ɵɵtext(11);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(12, \"div\", 4)(13, \"label\", 9);\n      i0.ɵɵtext(14, \"Product Code\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 6);\n      i0.ɵɵelement(16, \"input\", 10);\n      i0.ɵɵelementStart(17, \"span\", 8);\n      i0.ɵɵtext(18);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(19, \"div\", 4)(20, \"label\", 11);\n      i0.ɵɵtext(21, \"Star Rating (1-5)\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"div\", 6);\n      i0.ɵɵelement(23, \"input\", 12);\n      i0.ɵɵelementStart(24, \"span\", 8);\n      i0.ɵɵtext(25);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(26, \"div\", 13);\n      i0.ɵɵtemplate(27, WorkoutEditComponent_div_27_Template, 7, 3, \"div\", 14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(28, \"div\", 15)(29, \"div\", 16)(30, \"button\", 17);\n      i0.ɵɵlistener(\"click\", function WorkoutEditComponent_Template_button_click_30_listener() {\n        return ctx.addTag();\n      });\n      i0.ɵɵtext(31, \"Add Tag \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(32, \"div\", 4)(33, \"label\", 18);\n      i0.ɵɵtext(34, \"Description\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(35, \"div\", 6);\n      i0.ɵɵelement(36, \"textarea\", 19);\n      i0.ɵɵelementStart(37, \"span\", 8);\n      i0.ɵɵtext(38);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(39, \"div\", 4)(40, \"div\", 20)(41, \"button\", 21);\n      i0.ɵɵtext(42, \" Save \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(43, \"button\", 22);\n      i0.ɵɵtext(44, \" Cancel \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(45, \"button\", 23);\n      i0.ɵɵlistener(\"click\", function WorkoutEditComponent_Template_button_click_45_listener() {\n        return ctx.deleteProduct();\n      });\n      i0.ɵɵtext(46, \" Delete \");\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵtemplate(47, WorkoutEditComponent_div_47_Template, 2, 1, \"div\", 24);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.pageTitle, \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.productForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(15, _c0, ctx.displayMessage.productName));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.displayMessage.productName, \" \");\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(17, _c0, ctx.displayMessage.productCode));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.displayMessage.productCode, \" \");\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(19, _c0, ctx.displayMessage.starRating));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.displayMessage.starRating, \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.tags.controls);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(21, _c0, ctx.displayMessage.description));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.displayMessage.description, \" \");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"title\", ctx.productForm.valid ? \"Save your entered data\" : \"Disabled until the form data is valid\")(\"disabled\", !ctx.productForm.valid);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(23, _c1));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n    }\n  },\n  dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormArrayName, i2.RouterLink],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","WorkoutEditComponent","constructor","fb","route","router","workoutService","validationMessages","exerciseName","required","minlength","maxlength","exerciseCode","starRating","range","ngOnInit","exerciseForm","group","Validators","minLength","maxLength","NumberValidators","tags","array","description","sub","paramMap","subscribe","params","id","get","getexercise","ngOnDestroy","unsubscribe","ngAfterViewInit","controlBlurs","formInputElements","map","formControl","fromEvent","nativeElement","merge","valueChanges","pipe","debounceTime","value","displayMessage","genericValidator","processMessages","addTag","push","FormControl","deleteTag","index","removeAt","markAsDirty","exerciseService","next","exercise","displayexercise","error","err","errorMessage","reset","pageTitle","patchValue","setControl","deleteexercise","onSaveComplete","confirm","saveexercise","valid","dirty","p","createexercise","updateexercise","navigate","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\repos\\GymResult\\GymAngular\\src\\app\\workout\\workout-edit.component.html","D:\\repos\\GymResult\\GymAngular\\src\\app\\workout\\workout-edit.component.ts"],"sourcesContent":["<div class=\"card\">\n    <div class=\"card-header\">\n      {{pageTitle}}\n    </div>\n  \n    <div class=\"card-body\">\n      <form novalidate\n            (ngSubmit)=\"saveProduct()\"\n            [formGroup]=\"productForm\">\n  \n        <div class=\"form-group row mb-2\">\n          <label class=\"col-md-2 col-form-label\"\n                 for=\"productNameId\">Product Name</label>\n          <div class=\"col-md-8\">\n            <input class=\"form-control\"\n                   id=\"productNameId\"\n                   type=\"text\"\n                   placeholder=\"Name (required)\"\n                   formControlName=\"productName\"\n                   [ngClass]=\"{'is-invalid': displayMessage.productName }\" />\n            <span class=\"invalid-feedback\">\n              {{displayMessage.productName}}\n            </span>\n          </div>\n        </div>\n  \n        <div class=\"form-group row mb-2\">\n          <label class=\"col-md-2 col-form-label\"\n                 for=\"productCodeId\">Product Code</label>\n          <div class=\"col-md-8\">\n            <input class=\"form-control\"\n                   id=\"productCodeId\"\n                   type=\"text\"\n                   placeholder=\"Code (required)\"\n                   formControlName=\"productCode\"\n                   [ngClass]=\"{'is-invalid': displayMessage.productCode}\" />\n            <span class=\"invalid-feedback\">\n              {{displayMessage.productCode}}\n            </span>\n          </div>\n        </div>\n  \n        <div class=\"form-group row mb-2\">\n          <label class=\"col-md-2 col-form-label\"\n                 for=\"starRatingId\">Star Rating (1-5)</label>\n  \n          <div class=\"col-md-8\">\n            <input class=\"form-control\"\n                   id=\"starRatingId\"\n                   type=\"text\"\n                   placeholder=\"Rating (1-5)\"\n                   formControlName=\"starRating\"\n                   [ngClass]=\"{'is-invalid': displayMessage.starRating}\" />\n            <span class=\"invalid-feedback\">\n              {{displayMessage.starRating}}\n            </span>\n          </div>\n        </div>\n  \n        <div formArrayName=\"tags\">\n          <div class=\"form-group row mb-2\"\n               *ngFor=\"let tag of tags.controls; let i=index\">\n            <label class=\"col-md-2 col-form-label\"\n                   [attr.for]=\"i\">Tag</label>\n  \n            <div class=\"col-md-8\">\n              <input class=\"form-control\"\n                     [id]=\"i\"\n                     type=\"text\"\n                     placeholder=\"Tag\"\n                     [formControlName]=\"i\" />\n            </div>\n            <button class=\"col-md-1 btn btn-outline-warning btn-sm\"\n                    type=\"button\"\n                    title=\"Delete this search tag\"\n                    (click)=\"deleteTag(i)\">Delete Tag\n            </button>\n          </div>\n        </div>\n  \n        <div class=\"row\">\n          <div class=\"col-md-2 mb-2\">\n            <button class=\"btn btn-outline-secondary btn-sm\"\n                    type=\"button\"\n                    title=\"Add a search tag\"\n                    (click)=\"addTag()\">Add Tag\n            </button>\n          </div>\n        </div>\n        \n        <div class=\"form-group row mb-2\">\n          <label class=\"col-md-2 col-form-label\"\n                 for=\"descriptionId\">Description</label>\n  \n          <div class=\"col-md-8\">\n            <textarea class=\"form-control\"\n                      id=\"descriptionId\"\n                      placeholder=\"Description\"\n                      rows=3\n                      formControlName=\"description\"\n                      [ngClass]=\"{'is-invalid': displayMessage.description}\"></textarea>\n            <span class=\"invalid-feedback\">\n              {{ displayMessage.description}}\n            </span>\n          </div>\n        </div>\n  \n        <div class=\"form-group row mb-2\">\n          <div class=\"offset-md-2 col-md-4\">\n            <button class=\"btn btn-primary mr-3\"\n                    style=\"width:80px;\"\n                    type=\"submit\"\n                    [title]=\"productForm.valid ? 'Save your entered data' : 'Disabled until the form data is valid'\"\n                    [disabled]=\"!productForm.valid\">\n              Save\n            </button>\n            <button class=\"btn btn-outline-secondary mr-3\"\n                    style=\"width:80px;\"\n                    type=\"button\"\n                    title=\"Cancel your edits\"\n                    [routerLink]=\"['/products']\">\n              Cancel\n            </button>\n            <button class=\"btn btn-outline-warning\"\n                    style=\"width:80px\"\n                    type=\"button\"\n                    title=\"Delete this product\"\n                    (click)=\"deleteProduct()\">\n              Delete\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  \n    <div class=\"alert alert-danger\"\n         *ngIf=\"errorMessage\">{{errorMessage}}\n    </div>\n  </div>","import { AfterViewInit, Component } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { WorkoutService } from '../workout.service';\nimport { Exerceise } from './exercise';\n\nimport { Workout } from './workout';\n\n@Component({\n  selector: 'app-workout-edit',\n  templateUrl: './workout-edit.component.html',\n  styleUrls: ['./workout-edit.component.css']\n})\nexport class WorkoutEditComponent  {\n\n\n  pageTitle = 'exercise Edit';\n  errorMessage: string;\n  exerciseForm: FormGroup;\n\n  exercise: Exerceise;\n  private sub: Subscription;\n\n  // Use with the generic validation message class\n  displayMessage: { [key: string]: string } = {};\n  private validationMessages: { [key: string]: { [key: string]: string } };\n  // private genericValidator: GenericValidator;\n\n\n\n  constructor(private fb: FormBuilder,\n              private route: ActivatedRoute,\n              private router: Router,\n              private workoutService: WorkoutService) {\n\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    this.validationMessages = {\n      exerciseName: {\n        required: 'exercise name is required.',\n        minlength: 'exercise name must be at least three characters.',\n        maxlength: 'exercise name cannot exceed 50 characters.'\n      },\n      exerciseCode: {\n        required: 'exercise code is required.'\n      },\n      starRating: {\n        range: 'Rate the exercise between 1 (lowest) and 5 (highest).'\n      }\n    };\n\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    // this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n\n  ngOnInit(): void {\n    this.exerciseForm = this.fb.group({\n      exerciseName: ['', [Validators.required,\n                         Validators.minLength(3),\n                         Validators.maxLength(50)]],\n      exerciseCode: ['', Validators.required],\n      starRating: ['', NumberValidators.range(1, 5)],\n      tags: this.fb.array([]),\n      description: ''\n    });\n\n    // Read the exercise Id from the route parameter\n    this.sub = this.route.paramMap.subscribe(\n      params => {\n        const id = +params.get('id');\n        this.getexercise(id);\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.sub.unsubscribe();\n  }\n\n  ngAfterViewInit(): void {\n    // Watch for the blur event from any input element on the form.\n    // This is required because the valueChanges does not provide notification on blur\n    const controlBlurs: Observable<any>[] = this.formInputElements\n      .map((formControl: ElementRef) => fromEvent(formControl.nativeElement, 'blur'));\n\n    // Merge the blur event observable with the valueChanges observable\n    // so we only need to subscribe once.\n    merge(this.exerciseForm.valueChanges, ...controlBlurs).pipe(\n      debounceTime(800)\n    ).subscribe(value => {\n      this.displayMessage = this.genericValidator.processMessages(this.exerciseForm);\n    });\n  }\n\n  addTag(): void {\n    this.tags.push(new FormControl());\n  }\n\n  deleteTag(index: number): void {\n    this.tags.removeAt(index);\n    this.tags.markAsDirty();\n  }\n\n  getexercise(id: number): void {\n    this.exerciseService.getexercise(id)\n      .subscribe({\n        next: (exercise: exercise) => this.displayexercise(exercise),\n        error: err => this.errorMessage = err\n      });\n  }\n\n  displayexercise(exercise: exercise): void {\n    if (this.exerciseForm) {\n      this.exerciseForm.reset();\n    }\n    this.exercise = exercise;\n\n    if (this.exercise.id === 0) {\n      this.pageTitle = 'Add exercise';\n    } else {\n      this.pageTitle = `Edit exercise: ${this.exercise.exerciseName}`;\n    }\n\n    // Update the data on the form\n    this.exerciseForm.patchValue({\n      exerciseName: this.exercise.exerciseName,\n      exerciseCode: this.exercise.exerciseCode,\n      starRating: this.exercise.starRating,\n      description: this.exercise.description\n    });\n    this.exerciseForm.setControl('tags', this.fb.array(this.exercise.tags || []));\n  }\n\n  deleteexercise(): void {\n    if (this.exercise.id === 0) {\n      // Don't delete, it was never saved.\n      this.onSaveComplete();\n    } else {\n      if (confirm(`Really delete the exercise: ${this.exercise.exerciseName}?`)) {\n        this.exerciseService.deleteexercise(this.exercise.id)\n          .subscribe({\n            next: () => this.onSaveComplete(),\n            error: err => this.errorMessage = err\n          });\n      }\n    }\n  }\n\n  saveexercise(): void {\n    if (this.exerciseForm.valid) {\n      if (this.exerciseForm.dirty) {\n        const p = { ...this.exercise, ...this.exerciseForm.value };\n\n        if (p.id === 0) {\n          this.exerciseService.createexercise(p)\n            .subscribe({\n              next: () => this.onSaveComplete(),\n              error: err => this.errorMessage = err\n            });\n        } else {\n          this.exerciseService.updateexercise(p)\n            .subscribe({\n              next: () => this.onSaveComplete(),\n              error: err => this.errorMessage = err\n            });\n        }\n      } else {\n        this.onSaveComplete();\n      }\n    } else {\n      this.errorMessage = 'Please correct the validation errors.';\n    }\n  }\n\n  onSaveComplete(): void {\n    // Reset the form to clear the flags\n    this.exerciseForm.reset();\n    this.router.navigate(['/exercises']);\n  }\n    \n\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}