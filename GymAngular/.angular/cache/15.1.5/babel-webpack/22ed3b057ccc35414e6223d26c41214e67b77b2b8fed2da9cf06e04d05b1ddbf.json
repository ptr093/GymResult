{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class WorkoutService {\n  constructor(http) {\n    this.http = http;\n  }\n  getWorkouts() {\n    let url = 'https://localhost:7147/api/traings';\n    return this.http.get(url).pipe(tap(data => console.log(JSON.stringify(data))), catchError(this.handleError));\n  }\n  createWorkoutWithoutExercise(workout) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    workout.id = 0;\n    let url = '/api/traings/';\n    url += '/exerceises';\n    return this.http.post(url, exercise, {\n      headers\n    }).pipe(tap(data => console.log('createWorkout: ' + JSON.stringify(data))), catchError(this.handleError));\n  }\n  getExercises(id) {\n    // if (id === 0) {\n    //   return of(this.initializeExercise());\n    // }\n    let url = `https://localhost:7147/api/traings/${id}`;\n    url += '/exerceises';\n    return this.http.get(url).pipe(tap(data => console.log('getExercises: ' + JSON.stringify(data))), catchError(this.handleError));\n  }\n  getExercise(idTraining, idExercise) {\n    // if (id === 0) {\n    //   return of(this.initializeExercise());\n    // }\n    let url = `https://localhost:7147/api/traings/${idTraining}`;\n    url += `/exerceises/exercise?exerceiseId=${idExercise}`;\n    return this.http.get(url).pipe(tap(data => console.log('getExercises: ' + JSON.stringify(data))), catchError(this.handleError));\n  }\n  getWorkout(id) {\n    if (id === 0) {\n      return of(this.initializeWorkout());\n    }\n    let WorkoutsUrl = 'https://localhost:7147/api/traings';\n    const url = `${WorkoutsUrl}/${id}`;\n    return this.http.get(url).pipe(tap(data => console.log('getWorkout: ' + JSON.stringify(data))), catchError(this.handleError));\n  }\n  createWorkout(exercise) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    exercise.id = 0;\n    let url = `https://localhost:7147/api/traings/${exercise.trainingId}`;\n    url += '/exerceises';\n    return this.http.post(url, exercise, {\n      headers\n    }).pipe(tap(data => console.log('createWorkout: ' + JSON.stringify(data))), catchError(this.handleError));\n  }\n  deleteWorkout(idWorkout, idExercise) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    let url = `https://localhost:7147/api/traings/${idWorkout}`;\n    url += `/exerceises?exerceiseId=${idExercise}`;\n    return this.http.delete(url, {\n      headers\n    }).pipe(tap(data => console.log('deleteWorkout: ' + idExercise)), catchError(this.handleError));\n  }\n  updateWorkout(exercise) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json-patch+json'\n    });\n    let url = `https://localhost:7147/api/traings/${exercise.trainingId}`;\n    url += `/exerceises/${exercise.id}`;\n    const body = [{\n      \"operationType\": 0,\n      \"path\": \"/series\",\n      \"op\": \"replace\",\n      \"from\": \"string\",\n      \"value\": exercise.series\n    }, {\n      \"operationType\": 0,\n      \"path\": \"/weight\",\n      \"op\": \"replace\",\n      \"from\": \"string\",\n      \"value\": exercise.weight\n    }, {\n      \"operationType\": 0,\n      \"path\": \"/category\",\n      \"op\": \"replace\",\n      \"from\": \"string\",\n      \"value\": exercise.category\n    }];\n    return this.http.patch(url, body, {\n      headers\n    }).pipe(tap(() => console.log('updateWorkout: ' + exercise)),\n    // Return the Workout on an update\n    map(() => exercise), catchError(this.handleError));\n  }\n  handleError(err) {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    let errorMessage;\n    if (err.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;\n    }\n    console.error(err);\n    return throwError(errorMessage);\n  }\n  initializeWorkout() {\n    // Return an initialized object\n    return {\n      id: 0,\n      date: new Date(),\n      description: '',\n      location: ''\n    };\n  }\n  initializeExercise() {\n    // Return an initialized object\n    return {\n      id: 0,\n      category: '',\n      weight: 0,\n      series: 0,\n      trainingId: 0\n    };\n  }\n}\nWorkoutService.ɵfac = function WorkoutService_Factory(t) {\n  return new (t || WorkoutService)(i0.ɵɵinject(i1.HttpClient));\n};\nWorkoutService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WorkoutService,\n  factory: WorkoutService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","of","throwError","catchError","tap","map","WorkoutService","constructor","http","getWorkouts","url","get","pipe","data","console","log","JSON","stringify","handleError","createWorkoutWithoutExercise","workout","headers","id","post","exercise","getExercises","getExercise","idTraining","idExercise","getWorkout","initializeWorkout","WorkoutsUrl","createWorkout","trainingId","deleteWorkout","idWorkout","delete","updateWorkout","body","series","weight","category","patch","err","errorMessage","error","ErrorEvent","message","status","date","Date","description","location","initializeExercise","factory","providedIn"],"sourceRoot":"","sources":["D:\\repos\\GymResult\\GymAngular\\src\\app\\workout.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport { Exerceise } from './workout/exercise';\nimport { Workout } from './workout/workout';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WorkoutService {\n\n  \n\n  constructor(private http: HttpClient) {\n    \n   }\n\n  getWorkouts(): Observable<Workout[]> {\n\n    let url = 'https://localhost:7147/api/traings';\n    return this.http.get<Workout[]>(url)\n      .pipe(\n        tap(data => console.log(JSON.stringify(data))),\n        catchError(this.handleError)\n      );\n  }\n\n\n  createWorkoutWithoutExercise(workout: Workout): Observable<Workout> {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    workout.id = 0;\n    let url = '/api/traings/'\n    url +='/exerceises'\n    return this.http.post<Workout>(url, exercise, { headers })\n      .pipe(\n        tap(data => console.log('createWorkout: ' + JSON.stringify(data))),\n        catchError(this.handleError)\n      );\n  }\n\n\n\n\n  getExercises(id: number): Observable<Exerceise[]> {\n    \n    // if (id === 0) {\n    //   return of(this.initializeExercise());\n    // }\n    let url = `https://localhost:7147/api/traings/${id}`;\n    url +='/exerceises'\n    return this.http.get<Exerceise[]>(url)\n      .pipe(\n        tap(data => console.log('getExercises: ' + JSON.stringify(data))),\n        catchError(this.handleError)\n      );\n  }\n\n  getExercise(idTraining:number, idExercise: number): Observable<Exerceise> {\n    \n    // if (id === 0) {\n    //   return of(this.initializeExercise());\n    // }\n    let url = `https://localhost:7147/api/traings/${idTraining}`;\n    url += `/exerceises/exercise?exerceiseId=${idExercise}` ;\n    return this.http.get<Exerceise>(url)\n      .pipe(\n        tap(data => console.log('getExercises: ' + JSON.stringify(data))),\n        catchError(this.handleError)\n      );\n  }\n\n\n  getWorkout(id: number): Observable<Workout> {\n    if (id === 0) {\n      return of(this.initializeWorkout());\n    }\n    let WorkoutsUrl  = 'https://localhost:7147/api/traings';\n    const url = `${WorkoutsUrl}/${id}`;\n    return this.http.get<Workout>(url)\n      .pipe(\n        tap(data => console.log('getWorkout: ' + JSON.stringify(data))),\n        catchError(this.handleError)\n      );\n  }\n\n  createWorkout(exercise: Exerceise): Observable<Workout> {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    exercise.id = 0;\n    let url = `https://localhost:7147/api/traings/${exercise.trainingId}`;\n    url +='/exerceises'\n    return this.http.post<Workout>(url, exercise, { headers })\n      .pipe(\n        tap(data => console.log('createWorkout: ' + JSON.stringify(data))),\n        catchError(this.handleError)\n      );\n  }\n\n  deleteWorkout(idWorkout: number, idExercise: number): Observable<{}> {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n   let url = `https://localhost:7147/api/traings/${idWorkout}`;\n   url += `/exerceises?exerceiseId=${idExercise}` ;\n    \n    return this.http.delete<Workout>(url, { headers })\n      .pipe(\n        tap(data => console.log('deleteWorkout: ' + idExercise)),\n        catchError(this.handleError)\n      );\n  }\n\n  updateWorkout(exercise: Exerceise): Observable<Exerceise> {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json-patch+json' });\n    let url = `https://localhost:7147/api/traings/${exercise.trainingId}`;\n    url += `/exerceises/${exercise.id}` ;\n\n    const body = [{\n      \"operationType\": 0,\n    \"path\": \"/series\",\n    \"op\": \"replace\",\n    \"from\": \"string\",\n    \"value\": exercise.series\n  },\n  {\n    \"operationType\": 0,\n    \"path\": \"/weight\",\n    \"op\": \"replace\",\n    \"from\": \"string\",\n    \"value\": exercise.weight\n  },\n  {\n    \"operationType\": 0,\n    \"path\": \"/category\",\n    \"op\": \"replace\",\n    \"from\": \"string\",\n    \"value\": exercise.category\n  }\n\n];\n   \n    return this.http.patch<Exerceise>(url, body, { headers })\n      .pipe(\n        tap(() => console.log('updateWorkout: ' + exercise)),\n        // Return the Workout on an update\n        map(() => exercise),\n        catchError(this.handleError)\n      );\n  }\n\n  private handleError(err: { error: { message: any; }; status: any; body: { error: any; }; }): Observable<never> {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    let errorMessage: string;\n    if (err.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;\n    }\n    console.error(err);\n    return throwError(errorMessage);\n  }\n\n  private initializeWorkout(): Workout {\n    // Return an initialized object\n    return {\n\n      id :0,\n      date : new Date(),\n      description :'',\n      location :''\n    };\n  }\n\n    \n  private initializeExercise(): Exerceise {\n    // Return an initialized object\n    return {\n      id :0,\n      category : '',\n     weight : 0,\n      series:0,\n     trainingId:0\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}