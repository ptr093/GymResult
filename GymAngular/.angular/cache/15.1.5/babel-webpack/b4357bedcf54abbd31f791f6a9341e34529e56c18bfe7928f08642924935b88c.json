{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport { FormControlName, Validators } from '@angular/forms';\nimport { debounceTime, fromEvent, merge } from 'rxjs';\nimport { GenericValidator } from '../generic-validator';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../workout.service\";\nimport * as i4 from \"@angular/common\";\nfunction WorkoutEditComponent_div_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r0.errorMessage, \" \");\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nconst _c1 = function () {\n  return [\"/workout\"];\n};\nexport class WorkoutEditComponent {\n  ngAfterViewInit() {\n    // Watch for the blur event from any input element on the form.\n    // This is required because the valueChanges does not provide notification on blur\n    const controlBlurs = this.formInputElements.map(formControl => fromEvent(formControl.nativeElement, 'blur'));\n    // Merge the blur event observable with the valueChanges observable\n    // so we only need to subscribe once.\n    merge(this.exerciseForm.valueChanges, ...controlBlurs).pipe(debounceTime(800)).subscribe(value => {\n      this.displayMessage = this.genericValidator.processMessages(this.exerciseForm);\n    });\n  }\n  constructor(fb, route, router, workoutService) {\n    this.fb = fb;\n    this.route = route;\n    this.router = router;\n    this.workoutService = workoutService;\n    this.pageTitle = 'Product Edit';\n    this.errorMessage = '';\n    // Use with the generic validation message class\n    this.displayMessage = {};\n    this.emailMessage = '';\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    this.validationMessages = {\n      category: {\n        required: 'Kategoria jest wymagana',\n        minlength: 'Kategoria musi zawierać conajmniej 3 znaki',\n        maxlength: 'Katoria nie może zawierać więcej niż 50 znaków.'\n      },\n      series: {\n        required: 'Seria jest wymagana',\n        min: \"Podaj numer serii\"\n      },\n      weight: {\n        required: 'Podaj ciężar',\n        min: \"Podaj numer serii\"\n      }\n    };\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n  ngOnInit() {\n    this.exerciseForm = this.fb.group({\n      category: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\n      weight: ['', Validators.required, Validators.min(1)],\n      series: ['', Validators.required, Validators.min(1)]\n    });\n    let trainingId = Number(this.route.snapshot.paramMap.get('trainingId'));\n    let id = Number(this.route.snapshot.paramMap.get('id'));\n    this.workoutId = trainingId;\n    if (id !== 0) {\n      // Read the product Id from the route parameter\n      this.sub = this.route.paramMap.subscribe(params => {\n        this.getExercise(trainingId, id);\n      });\n    }\n  }\n  setMessage(c) {\n    this.emailMessage = '';\n    if ((c.touched || c.dirty) && c.errors) {\n      this.emailMessage = Object.keys(c.errors).map(key => this.validationMessages[key]).join(' ');\n    }\n  }\n  ngOnDestroy() {\n    this.sub === undefined ? \"\" : this.sub.unsubscribe();\n  }\n  getExercise(idTraining, idExercise) {\n    this.workoutService.getExercise(idTraining, idExercise).subscribe({\n      next: exercise => this.displayExercise(exercise),\n      error: err => this.errorMessage = err\n    });\n  }\n  displayExercise(exercise) {\n    if (this.exerciseForm) {\n      this.exerciseForm.reset();\n    }\n    this.exercise = exercise;\n    if (this.exercise.id === 0 || this.exercise.id === null) {\n      this.pageTitle = 'Add Exercise';\n    } else {\n      this.pageTitle = `Edit Exercise: ${this.exercise.category}`;\n    }\n    // Update the data on the form\n    this.exerciseForm.patchValue({\n      category: this.exercise.category,\n      weight: this.exercise.weight,\n      series: this.exercise.series\n    });\n  }\n  deleteExercise() {\n    if (this.exercise.id === 0) {\n      // Don't delete, it was never saved.\n      this.onSaveComplete();\n    } else {\n      if (confirm(`Really delete the product: ${this.exercise.category}?`)) {\n        this.workoutService.deleteWorkout(this.exercise.trainingId, this.exercise.id).subscribe({\n          next: () => this.onSaveComplete(),\n          error: err => this.errorMessage = err\n        });\n      }\n    }\n  }\n  saveExercise() {\n    if (this.exerciseForm.valid) {\n      if (this.exerciseForm.dirty) {\n        const p = {\n          ...this.exercise,\n          ...this.exerciseForm.value\n        };\n        console.log(p.idExercise, p.category, p.series);\n        if (this.exercise === undefined) {\n          p.trainingId = this.workoutId;\n          this.workoutService.createWorkout(p).subscribe({\n            next: () => this.onSaveComplete(),\n            error: err => this.errorMessage = err\n          });\n        } else {\n          this.workoutService.updateWorkout(p).subscribe({\n            next: () => this.onSaveComplete(),\n            error: err => this.errorMessage = err\n          });\n        }\n      } else {\n        this.onSaveComplete();\n      }\n    } else {\n      this.errorMessage = 'Please correct the validation errors.';\n    }\n  }\n  onSaveComplete() {\n    // Reset the form to clear the flags\n    this.exerciseForm.reset();\n    this.router.navigate(['/workout']);\n  }\n}\nWorkoutEditComponent.ɵfac = function WorkoutEditComponent_Factory(t) {\n  return new (t || WorkoutEditComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.WorkoutService));\n};\nWorkoutEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: WorkoutEditComponent,\n  selectors: [[\"ng-component\"]],\n  viewQuery: function WorkoutEditComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(FormControlName, 5, ElementRef);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.formInputElements = _t);\n    }\n  },\n  decls: 35,\n  vars: 18,\n  consts: [[1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\", \"row\", \"mb-2\"], [\"for\", \"exerciseId\", 1, \"col-md-2\", \"col-form-label\"], [1, \"col-md-8\"], [\"id\", \"exerciseId\", \"type\", \"text\", \"placeholder\", \"Cwiczenie (wymagane pole)\", \"formControlName\", \"category\", 1, \"form-control\", 3, \"ngClass\"], [1, \"invalid-feedback\"], [\"id\", \"exerciseId\", \"type\", \"text\", \"placeholder\", \"Ci\\u0119\\u017Car (wymagane pole)\", \"formControlName\", \"weight\", 1, \"form-control\", 3, \"ngClass\"], [\"id\", \"exerciseId\", \"type\", \"text\", \"placeholder\", \"seria (wymagane pole)\", \"formControlName\", \"series\", 1, \"form-control\", 3, \"ngClass\"], [1, \"offset-md-2\", \"col-md-4\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mr-3\", 2, \"width\", \"80px\", 3, \"disabled\"], [\"type\", \"button\", \"title\", \"Anuluj edytowanie\", 1, \"btn\", \"btn-outline-secondary\", \"mr-3\", 2, \"width\", \"80px\", 3, \"routerLink\"], [\"type\", \"button\", \"title\", \"Usu\\u0144 trening\", 1, \"btn\", \"btn-outline-warning\", 2, \"width\", \"80px\", 3, \"click\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [1, \"alert\", \"alert-danger\"]],\n  template: function WorkoutEditComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 2)(4, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function WorkoutEditComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.saveExercise();\n      });\n      i0.ɵɵelementStart(5, \"div\", 4)(6, \"label\", 5);\n      i0.ɵɵtext(7, \"Cwiczenie\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 6);\n      i0.ɵɵelement(9, \"input\", 7);\n      i0.ɵɵelementStart(10, \"span\", 8);\n      i0.ɵɵtext(11);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(12, \"div\", 4)(13, \"label\", 5);\n      i0.ɵɵtext(14, \"Ci\\u0119\\u017Car\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 6);\n      i0.ɵɵelement(16, \"input\", 9);\n      i0.ɵɵelementStart(17, \"span\", 8);\n      i0.ɵɵtext(18);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(19, \"div\", 4)(20, \"label\", 5);\n      i0.ɵɵtext(21, \"Seria\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"div\", 6);\n      i0.ɵɵelement(23, \"input\", 10);\n      i0.ɵɵelementStart(24, \"span\", 8);\n      i0.ɵɵtext(25);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(26, \"div\", 4)(27, \"div\", 11)(28, \"button\", 12);\n      i0.ɵɵtext(29, \" Save \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(30, \"button\", 13);\n      i0.ɵɵtext(31, \" Anuluj \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(32, \"button\", 14);\n      i0.ɵɵlistener(\"click\", function WorkoutEditComponent_Template_button_click_32_listener() {\n        return ctx.deleteExercise();\n      });\n      i0.ɵɵtext(33, \" Delete \");\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵtemplate(34, WorkoutEditComponent_div_34_Template, 2, 1, \"div\", 15);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.pageTitle, \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.exerciseForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c0, ctx.displayMessage[\"category\"]));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.displayMessage[\"category\"], \" \");\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(13, _c0, ctx.displayMessage[\"weight\"]));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.displayMessage[\"weight\"], \" \");\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(15, _c0, ctx.displayMessage[\"series\"]));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.displayMessage[\"series\"], \" \");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"disabled\", !ctx.exerciseForm.valid);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(17, _c1));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n    }\n  },\n  dependencies: [i4.NgClass, i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i2.RouterLink],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["ElementRef","FormControlName","Validators","debounceTime","fromEvent","merge","GenericValidator","i0","WorkoutEditComponent","ngAfterViewInit","controlBlurs","formInputElements","map","formControl","nativeElement","exerciseForm","valueChanges","pipe","subscribe","value","displayMessage","genericValidator","processMessages","constructor","fb","route","router","workoutService","validationMessages","category","required","minlength","maxlength","series","min","weight","ngOnInit","group","minLength","maxLength","trainingId","Number","snapshot","paramMap","get","id","workoutId","sub","params","getExercise","setMessage","c","emailMessage","touched","dirty","errors","Object","keys","key","join","ngOnDestroy","undefined","unsubscribe","idTraining","idExercise","next","exercise","displayExercise","error","err","errorMessage","reset","pageTitle","patchValue","deleteExercise","onSaveComplete","confirm","deleteWorkout","saveExercise","valid","p","console","log","createWorkout","updateWorkout","navigate","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["D:\\repos\\GymResult\\GymAngular\\src\\app\\workout\\workout-edit.component.ts","D:\\repos\\GymResult\\GymAngular\\src\\app\\workout\\workout-edit.component.html"],"sourcesContent":["import { AfterViewInit, Component, ElementRef, OnDestroy, OnInit, ViewChildren } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormControlName, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { debounceTime, fromEvent, merge, Observable, Subscription } from 'rxjs';\nimport { GenericValidator } from '../generic-validator';\n\n\nimport { WorkoutService } from '../workout.service';\nimport { Exerceise } from './exercise';\nimport { Workout } from './workout';\n\n@Component({\n\n  templateUrl: './workout-edit.component.html',\n  styleUrls: ['./workout-edit.component.css']\n})\nexport class WorkoutEditComponent implements  OnInit, OnDestroy, AfterViewInit  {\n  @ViewChildren(FormControlName, { read: ElementRef }) public formInputElements!: ElementRef[] \n\n  pageTitle = 'Product Edit';\n  errorMessage: string  = '';\n public exerciseForm!: FormGroup \n\n  public exercise!: Exerceise \n  public sub!: Subscription;\n  public workoutId!:number;\n\n  // Use with the generic validation message class\n  displayMessage: { [key: string]: string } = {};\n  private validationMessages: { [key: string]: { [key: string]: string } };\n  \n  private genericValidator: GenericValidator;\n\n  ngAfterViewInit(): void {\n    // Watch for the blur event from any input element on the form.\n    // This is required because the valueChanges does not provide notification on blur\n    const controlBlurs: Observable<any>[] = this.formInputElements\n      .map((formControl: ElementRef) => fromEvent(formControl.nativeElement, 'blur'));\n\n    // Merge the blur event observable with the valueChanges observable\n    // so we only need to subscribe once.\n    merge(this.exerciseForm.valueChanges, ...controlBlurs).pipe(\n      debounceTime(800)\n    ).subscribe(value => {\n      this.displayMessage = this.genericValidator.processMessages(this.exerciseForm);\n    });\n  }\n\n  constructor(private fb: FormBuilder,\n              private route: ActivatedRoute,\n              private router: Router,\n              private workoutService: WorkoutService) {\n\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n   this.validationMessages = {\n      category: {\n        required: 'Kategoria jest wymagana',\n        minlength: 'Kategoria musi zawierać conajmniej 3 znaki',\n        maxlength: 'Katoria nie może zawierać więcej niż 50 znaków.'\n      },\n      series: {\n        required: 'Seria jest wymagana',\n        min:    \"Podaj numer serii\"\n      },\n      weight: {\n        required: 'Podaj ciężar',\n        min:    \"Podaj numer serii\"\n      }\n    };\n\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n \n\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n\n  \n\n  ngOnInit(): void {\n    this.exerciseForm = this.fb.group({\n      category: ['', [Validators.required,\n                         Validators.minLength(3),\n                         Validators.maxLength(50)]],\n      weight: ['', Validators.required,\n                   Validators.min(1)],\n      series: ['', Validators.required,\n                     Validators.min(1)]\n      \n    });\n\n    let trainingId = Number(this.route.snapshot.paramMap.get('trainingId'));\n     let id = Number(this.route.snapshot.paramMap.get('id'));\n  \n   \n    this.workoutId=trainingId;\n\n\n     if (id !== 0){\n    // Read the product Id from the route parameter\n    this.sub = this.route.paramMap.subscribe(\n      params => {\n        \n        this.getExercise(trainingId,id);\n      }\n    );\n     }\n  }\n  emailMessage ='';\n  setMessage(c: AbstractControl): void {\n    this.emailMessage = '';\n    if ((c.touched || c.dirty) && c.errors) {\n      this.emailMessage = Object.keys(c.errors).map(\n        key => this.validationMessages[key]).join(' ');\n    }\n  }\n\n\n  ngOnDestroy(): void {\n\n     this.sub ===undefined? \"\": this.sub.unsubscribe();\n  }\n\n \n\n  getExercise(idTraining: number,idExercise: number): void {\n\n\n   \n    this.workoutService.getExercise(idTraining,idExercise)\n      .subscribe({\n        next: (exercise: Exerceise) => this.displayExercise(exercise),\n        error: err => this.errorMessage = err\n      });\n  \n  }\n\n\n  \n\n\n\n  displayExercise(exercise: Exerceise): void {\n    if (this.exerciseForm) {\n      this.exerciseForm.reset();\n    }\n    this.exercise = exercise;\n\n\n\n    if (this.exercise.id === 0 || this.exercise.id === null) {\n      this.pageTitle = 'Add Exercise';\n    } else {\n      this.pageTitle = `Edit Exercise: ${this.exercise.category}`;\n    }\n\n    // Update the data on the form\n    this.exerciseForm.patchValue({\n      category: this.exercise.category,\n      weight: this.exercise.weight,\n      series: this.exercise.series,\n   \n    });\n  \n  }\n\n  deleteExercise(): void {\n    if (this.exercise.id === 0) {\n      // Don't delete, it was never saved.\n      this.onSaveComplete();\n    } else {\n      if (confirm(`Really delete the product: ${this.exercise.category}?`)) {\n        this.workoutService.deleteWorkout(this.exercise.trainingId,this.exercise.id)\n          .subscribe({\n            next: () => this.onSaveComplete(),\n            error: err => this.errorMessage = err\n          });\n      }\n    }\n  }\n\n  saveExercise(): void {\n    if (this.exerciseForm.valid) {\n      if (this.exerciseForm.dirty) {\n        const p = { ...this.exercise, ...this.exerciseForm.value };\n       \n        console.log(p.idExercise, p.category, p.series);\n        \n        if ( this.exercise=== undefined) {\n          p.trainingId =this.workoutId\n          this.workoutService.createWorkout(p)\n            .subscribe({\n              next: () => this.onSaveComplete(),\n              error: err => this.errorMessage = err\n            });\n        } \n        else {\n          this.workoutService.updateWorkout(p)\n            .subscribe({\n              next: () => this.onSaveComplete(),\n              error: err => this.errorMessage = err\n            });\n        }\n      } else {\n        this.onSaveComplete();\n      }\n    } else {\n      this.errorMessage = 'Please correct the validation errors.';\n    }\n  }\n\n  onSaveComplete(): void {\n    // Reset the form to clear the flags\n    this.exerciseForm.reset();\n    this.router.navigate(['/workout']);\n  }\n}\n","<div class=\"card\">\n    <div class=\"card-header\">\n      {{pageTitle}}\n    </div>\n  \n    <div class=\"card-body\">\n      <form novalidate\n            (ngSubmit)=\"saveExercise()\"\n            [formGroup]=\"exerciseForm\">\n\n            <div class=\"form-group row mb-2\">\n                <label class=\"col-md-2 col-form-label\"\n                       for=\"exerciseId\">Cwiczenie</label>\n                <div class=\"col-md-8\">\n                  <input class=\"form-control\"\n                         id=\"exerciseId\"\n                         type=\"text\"\n                         placeholder=\"Cwiczenie (wymagane pole)\"\n                         formControlName=\"category\"\n                         [ngClass]=\"{'is-invalid': displayMessage['category']  }\"\n                         />\n                         <span class=\"invalid-feedback\">\n                          {{displayMessage['category']}}\n                        </span>\n                </div>\n              </div>\n  \n        <div class=\"form-group row mb-2\">\n          <label class=\"col-md-2 col-form-label\"\n                 for=\"exerciseId\">Ciężar</label>\n          <div class=\"col-md-8\">\n            <input class=\"form-control\"\n                   id=\"exerciseId\"\n                   type=\"text\"\n                   placeholder=\"Ciężar (wymagane pole)\"\n                   formControlName=\"weight\"\n                   [ngClass]=\"{'is-invalid': displayMessage['weight']  }\"\n                   />\n                   <span class=\"invalid-feedback\">\n                    {{displayMessage['weight']}}\n                  </span>\n          </div>\n        </div>\n  \n        <div class=\"form-group row mb-2\">\n          <label class=\"col-md-2 col-form-label\"\n                 for=\"exerciseId\">Seria</label>\n          <div class=\"col-md-8\">\n            <input class=\"form-control\"\n                   id=\"exerciseId\"\n                   type=\"text\"\n                   placeholder=\"seria (wymagane pole)\"\n                   formControlName=\"series\"\n                   [ngClass]=\"{'is-invalid': displayMessage['series']  }\"\n                    />\n                    <span class=\"invalid-feedback\">\n                      {{displayMessage['series']}}\n                    </span>\n           \n          </div>\n        </div>\n  \n       \n  \n        \n  \n       \n        \n  \n        <div class=\"form-group row mb-2\">\n          <div class=\"offset-md-2 col-md-4\">\n            <button class=\"btn btn-primary mr-3\"\n                    style=\"width:80px;\"\n                    type=\"submit\"\n                   \n                    [disabled]=\"!exerciseForm.valid\">\n              Save\n            </button>\n            <button class=\"btn btn-outline-secondary mr-3\"\n                    style=\"width:80px;\"\n                    type=\"button\"\n                    title=\"Anuluj edytowanie\"\n                    [routerLink]=\"['/workout']\">\n              Anuluj\n            </button>\n            <button class=\"btn btn-outline-warning\"\n                    style=\"width:80px\"\n                    type=\"button\"\n                    title=\"Usuń trening\"\n                    (click)=\"deleteExercise()\">\n              Delete\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  \n    <div class=\"alert alert-danger\"\n         *ngIf=\"errorMessage\">{{errorMessage}}\n    </div>\n  </div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}