{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class WorkoutService {\n  constructor(http) {\n    this.http = http;\n    this.WorkoutsUrl = 'https://localhost:7147/api/traings';\n  }\n  getWorkouts() {\n    return this.http.get(this.WorkoutsUrl).pipe(tap(data => console.log(JSON.stringify(data))), catchError(this.handleError));\n  }\n  getExercises(id) {\n    this.WorkoutsUrl = \"\";\n    if (id === 0) {\n      return of(this.initializeWorkout());\n    }\n    let url = `${this.WorkoutsUrl}/${id}`;\n    url += '/exerceises';\n    return this.http.get(url).pipe(tap(data => console.log('getExercises: ' + JSON.stringify(data))), catchError(this.handleError));\n  }\n  getWorkout(id) {\n    if (id === 0) {\n      return of(this.initializeWorkout());\n    }\n    const url = `${this.WorkoutsUrl}/${id}`;\n    return this.http.get(url).pipe(tap(data => console.log('getWorkout: ' + JSON.stringify(data))), catchError(this.handleError));\n  }\n  // createWorkout(Workout: Workout): Observable<Workout> {\n  //   const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n  //   Workout.Id = null;\n  //   return this.http.post<Workout>(this.WorkoutsUrl, Workout, { headers })\n  //     .pipe(\n  //       tap(data => console.log('createWorkout: ' + JSON.stringify(data))),\n  //       catchError(this.handleError)\n  //     );\n  // }\n  deleteWorkout(id) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    const url = `${this.WorkoutsUrl}/${id}`;\n    return this.http.delete(url, {\n      headers\n    }).pipe(tap(data => console.log('deleteWorkout: ' + id)), catchError(this.handleError));\n  }\n  updateWorkout(Workout) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    const url = `${this.WorkoutsUrl}/${Workout.id}`;\n    return this.http.put(url, Workout, {\n      headers\n    }).pipe(tap(() => console.log('updateWorkout: ' + Workout.id)),\n    // Return the Workout on an update\n    map(() => Workout), catchError(this.handleError));\n  }\n  handleError(err) {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    let errorMessage;\n    if (err.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;\n    }\n    console.error(err);\n    return throwError(errorMessage);\n  }\n  initializeWorkout() {\n    // Return an initialized object\n    return {\n      id: 0,\n      date: new Date(),\n      description: '',\n      location: ''\n    };\n  }\n  initializeExercise() {\n    // Return an initialized object\n    return {\n      id: 0,\n      category: '',\n      weight: null,\n      series: null\n    };\n  }\n}\nWorkoutService.ɵfac = function WorkoutService_Factory(t) {\n  return new (t || WorkoutService)(i0.ɵɵinject(i1.HttpClient));\n};\nWorkoutService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WorkoutService,\n  factory: WorkoutService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","of","throwError","catchError","tap","map","WorkoutService","constructor","http","getWorkouts","get","WorkoutsUrl","pipe","data","console","log","JSON","stringify","handleError","getExercises","id","initializeWorkout","url","getWorkout","deleteWorkout","headers","delete","updateWorkout","Workout","put","err","errorMessage","error","ErrorEvent","message","status","body","date","Date","description","location","initializeExercise","category","weight","series","factory","providedIn"],"sourceRoot":"","sources":["D:\\repos\\GymResult\\GymAngular\\src\\app\\workout.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport { Exerceises } from './workout/exercise';\nimport { Workout } from './workout/workout';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WorkoutService {\n\n  private WorkoutsUrl = 'https://localhost:7147/api/traings';\n\n  constructor(private http: HttpClient) {\n    \n   }\n\n  getWorkouts(): Observable<Workout[]> {\n    return this.http.get<Workout[]>(this.WorkoutsUrl)\n      .pipe(\n        tap(data => console.log(JSON.stringify(data))),\n        catchError(this.handleError)\n      );\n  }\n\n\n  getExercises(id: number): Observable<Exerceises> {\n    this.WorkoutsUrl =\"\"\n    if (id === 0) {\n      return of(this.initializeWorkout());\n    }\n    let url = `${this.WorkoutsUrl}/${id}`;\n    url +='/exerceises'\n    return this.http.get<Exerceises>(url)\n      .pipe(\n        tap(data => console.log('getExercises: ' + JSON.stringify(data))),\n        catchError(this.handleError)\n      );\n  }\n\n  getWorkout(id: number): Observable<Workout> {\n    if (id === 0) {\n      return of(this.initializeWorkout());\n    }\n    const url = `${this.WorkoutsUrl}/${id}`;\n    return this.http.get<Workout>(url)\n      .pipe(\n        tap(data => console.log('getWorkout: ' + JSON.stringify(data))),\n        catchError(this.handleError)\n      );\n  }\n\n  // createWorkout(Workout: Workout): Observable<Workout> {\n  //   const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n  //   Workout.Id = null;\n  //   return this.http.post<Workout>(this.WorkoutsUrl, Workout, { headers })\n  //     .pipe(\n  //       tap(data => console.log('createWorkout: ' + JSON.stringify(data))),\n  //       catchError(this.handleError)\n  //     );\n  // }\n\n  deleteWorkout(id: number): Observable<{}> {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    const url = `${this.WorkoutsUrl}/${id}`;\n    return this.http.delete<Workout>(url, { headers })\n      .pipe(\n        tap(data => console.log('deleteWorkout: ' + id)),\n        catchError(this.handleError)\n      );\n  }\n\n  updateWorkout(Workout: Workout): Observable<Workout> {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    const url = `${this.WorkoutsUrl}/${Workout.id}`;\n    return this.http.put<Workout>(url, Workout, { headers })\n      .pipe(\n        tap(() => console.log('updateWorkout: ' + Workout.id)),\n        // Return the Workout on an update\n        map(() => Workout),\n        catchError(this.handleError)\n      );\n  }\n\n  private handleError(err: { error: { message: any; }; status: any; body: { error: any; }; }): Observable<never> {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    let errorMessage: string;\n    if (err.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;\n    }\n    console.error(err);\n    return throwError(errorMessage);\n  }\n\n  private initializeWorkout(): Workout {\n    // Return an initialized object\n    return {\n\n      id :0,\n      date : new Date(),\n      description :'',\n      location :''\n    };\n\n    \n  private initializeExercise(): Exerceises {\n    // Return an initialized object\n    return {\n\n      id :0,\n     category:'',\n      weight :null,\n     series:null,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}