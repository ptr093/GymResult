{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { debounceTime, fromEvent, merge } from 'rxjs';\nimport { GenericValidator } from '../generic-validator';\nlet WorkoutEditComponent = class WorkoutEditComponent {\n  get tags() {\n    return this.productForm.get('tags');\n  }\n  constructor(fb, route, router, productService) {\n    this.fb = fb;\n    this.route = route;\n    this.router = router;\n    this.productService = productService;\n    this.pageTitle = 'Product Edit';\n    // Use with the generic validation message class\n    this.displayMessage = {};\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    this.validationMessages = {\n      productName: {\n        required: 'Product name is required.',\n        minlength: 'Product name must be at least three characters.',\n        maxlength: 'Product name cannot exceed 50 characters.'\n      },\n      productCode: {\n        required: 'Product code is required.'\n      },\n      starRating: {\n        range: 'Rate the product between 1 (lowest) and 5 (highest).'\n      }\n    };\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n  ngOnInit() {\n    this.productForm = this.fb.group({\n      productName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\n      productCode: ['', Validators.required],\n      starRating: ['', NumberValidators.range(1, 5)],\n      tags: this.fb.array([]),\n      description: ''\n    });\n    // Read the product Id from the route parameter\n    this.sub = this.route.paramMap.subscribe(params => {\n      const id = +params.get('id');\n      this.getProduct(id);\n    });\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n  ngAfterViewInit() {\n    // Watch for the blur event from any input element on the form.\n    // This is required because the valueChanges does not provide notification on blur\n    const controlBlurs = this.formInputElements.map(formControl => fromEvent(formControl.nativeElement, 'blur'));\n    // Merge the blur event observable with the valueChanges observable\n    // so we only need to subscribe once.\n    merge(this.productForm.valueChanges, ...controlBlurs).pipe(debounceTime(800)).subscribe(value => {\n      this.displayMessage = this.genericValidator.processMessages(this.productForm);\n    });\n  }\n  addTag() {\n    this.tags.push(new FormControl());\n  }\n  deleteTag(index) {\n    this.tags.removeAt(index);\n    this.tags.markAsDirty();\n  }\n  getProduct(id) {\n    this.productService.getProduct(id).subscribe({\n      next: product => this.displayProduct(product),\n      error: err => this.errorMessage = err\n    });\n  }\n  displayProduct(product) {\n    if (this.productForm) {\n      this.productForm.reset();\n    }\n    this.product = product;\n    if (this.product.id === 0) {\n      this.pageTitle = 'Add Product';\n    } else {\n      this.pageTitle = `Edit Product: ${this.product.productName}`;\n    }\n    // Update the data on the form\n    this.productForm.patchValue({\n      productName: this.product.productName,\n      productCode: this.product.productCode,\n      starRating: this.product.starRating,\n      description: this.product.description\n    });\n    this.productForm.setControl('tags', this.fb.array(this.product.tags || []));\n  }\n  deleteProduct() {\n    if (this.product.id === 0) {\n      // Don't delete, it was never saved.\n      this.onSaveComplete();\n    } else {\n      if (confirm(`Really delete the product: ${this.product.productName}?`)) {\n        this.productService.deleteProduct(this.product.id).subscribe({\n          next: () => this.onSaveComplete(),\n          error: err => this.errorMessage = err\n        });\n      }\n    }\n  }\n  saveProduct() {\n    if (this.productForm.valid) {\n      if (this.productForm.dirty) {\n        const p = {\n          ...this.product,\n          ...this.productForm.value\n        };\n        if (p.id === 0) {\n          this.productService.createProduct(p).subscribe({\n            next: () => this.onSaveComplete(),\n            error: err => this.errorMessage = err\n          });\n        } else {\n          this.productService.updateProduct(p).subscribe({\n            next: () => this.onSaveComplete(),\n            error: err => this.errorMessage = err\n          });\n        }\n      } else {\n        this.onSaveComplete();\n      }\n    } else {\n      this.errorMessage = 'Please correct the validation errors.';\n    }\n  }\n  onSaveComplete() {\n    // Reset the form to clear the flags\n    this.productForm.reset();\n    this.router.navigate(['/products']);\n  }\n};\nWorkoutEditComponent = __decorate([Component({\n  templateUrl: './workout-edit.component.html',\n  styleUrls: ['./workout-edit.component.css']\n})], WorkoutEditComponent);\nexport { WorkoutEditComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","debounceTime","fromEvent","merge","GenericValidator","WorkoutEditComponent","tags","productForm","get","constructor","fb","route","router","productService","validationMessages","productName","required","minlength","maxlength","productCode","starRating","range","genericValidator","ngOnInit","group","minLength","maxLength","NumberValidators","array","description","sub","paramMap","subscribe","params","id","getProduct","ngOnDestroy","unsubscribe","ngAfterViewInit","controlBlurs","formInputElements","map","formControl","nativeElement","valueChanges","pipe","value","displayMessage","processMessages","addTag","push","FormControl","deleteTag","index","removeAt","markAsDirty","next","product","displayProduct","error","err","errorMessage","reset","pageTitle","patchValue","setControl","deleteProduct","onSaveComplete","confirm","saveProduct","valid","dirty","p","createProduct","updateProduct","navigate","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\repos\\GymResult\\GymAngular\\src\\app\\workout\\workout-edit.component.ts"],"sourcesContent":["import { AfterViewInit, Component, ElementRef, OnDestroy, OnInit, ViewChildren } from '@angular/core';\nimport { FormBuilder, FormControlName, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { debounceTime, fromEvent, merge, Observable, Subscription } from 'rxjs';\nimport { GenericValidator } from '../generic-validator';\n\nimport { WorkoutService } from '../workout.service';\nimport { Exerceise } from './exercise';\n\n@Component({\n\n  templateUrl: './workout-edit.component.html',\n  styleUrls: ['./workout-edit.component.css']\n})\nexport class WorkoutEditComponent implements  OnInit, OnDestroy  {\n\n\n  pageTitle = 'Product Edit';\n  errorMessage: string;\n  productForm: FormGroup;\n\n  product: Product;\n  private sub: Subscription;\n\n  // Use with the generic validation message class\n  displayMessage: { [key: string]: string } = {};\n  private validationMessages: { [key: string]: { [key: string]: string } };\n  private genericValidator: GenericValidator;\n\n  get tags(): FormArray {\n    return this.productForm.get('tags') as FormArray;\n  }\n\n  constructor(private fb: FormBuilder,\n              private route: ActivatedRoute,\n              private router: Router,\n              private productService: ProductService) {\n\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    this.validationMessages = {\n      productName: {\n        required: 'Product name is required.',\n        minlength: 'Product name must be at least three characters.',\n        maxlength: 'Product name cannot exceed 50 characters.'\n      },\n      productCode: {\n        required: 'Product code is required.'\n      },\n      starRating: {\n        range: 'Rate the product between 1 (lowest) and 5 (highest).'\n      }\n    };\n\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n\n  ngOnInit(): void {\n    this.productForm = this.fb.group({\n      productName: ['', [Validators.required,\n                         Validators.minLength(3),\n                         Validators.maxLength(50)]],\n      productCode: ['', Validators.required],\n      starRating: ['', NumberValidators.range(1, 5)],\n      tags: this.fb.array([]),\n      description: ''\n    });\n\n    // Read the product Id from the route parameter\n    this.sub = this.route.paramMap.subscribe(\n      params => {\n        const id = +params.get('id');\n        this.getProduct(id);\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.sub.unsubscribe();\n  }\n\n  ngAfterViewInit(): void {\n    // Watch for the blur event from any input element on the form.\n    // This is required because the valueChanges does not provide notification on blur\n    const controlBlurs: Observable<any>[] = this.formInputElements\n      .map((formControl: ElementRef) => fromEvent(formControl.nativeElement, 'blur'));\n\n    // Merge the blur event observable with the valueChanges observable\n    // so we only need to subscribe once.\n    merge(this.productForm.valueChanges, ...controlBlurs).pipe(\n      debounceTime(800)\n    ).subscribe(value => {\n      this.displayMessage = this.genericValidator.processMessages(this.productForm);\n    });\n  }\n\n  addTag(): void {\n    this.tags.push(new FormControl());\n  }\n\n  deleteTag(index: number): void {\n    this.tags.removeAt(index);\n    this.tags.markAsDirty();\n  }\n\n  getProduct(id: number): void {\n    this.productService.getProduct(id)\n      .subscribe({\n        next: (product: Product) => this.displayProduct(product),\n        error: err => this.errorMessage = err\n      });\n  }\n\n  displayProduct(product: Product): void {\n    if (this.productForm) {\n      this.productForm.reset();\n    }\n    this.product = product;\n\n    if (this.product.id === 0) {\n      this.pageTitle = 'Add Product';\n    } else {\n      this.pageTitle = `Edit Product: ${this.product.productName}`;\n    }\n\n    // Update the data on the form\n    this.productForm.patchValue({\n      productName: this.product.productName,\n      productCode: this.product.productCode,\n      starRating: this.product.starRating,\n      description: this.product.description\n    });\n    this.productForm.setControl('tags', this.fb.array(this.product.tags || []));\n  }\n\n  deleteProduct(): void {\n    if (this.product.id === 0) {\n      // Don't delete, it was never saved.\n      this.onSaveComplete();\n    } else {\n      if (confirm(`Really delete the product: ${this.product.productName}?`)) {\n        this.productService.deleteProduct(this.product.id)\n          .subscribe({\n            next: () => this.onSaveComplete(),\n            error: err => this.errorMessage = err\n          });\n      }\n    }\n  }\n\n  saveProduct(): void {\n    if (this.productForm.valid) {\n      if (this.productForm.dirty) {\n        const p = { ...this.product, ...this.productForm.value };\n\n        if (p.id === 0) {\n          this.productService.createProduct(p)\n            .subscribe({\n              next: () => this.onSaveComplete(),\n              error: err => this.errorMessage = err\n            });\n        } else {\n          this.productService.updateProduct(p)\n            .subscribe({\n              next: () => this.onSaveComplete(),\n              error: err => this.errorMessage = err\n            });\n        }\n      } else {\n        this.onSaveComplete();\n      }\n    } else {\n      this.errorMessage = 'Please correct the validation errors.';\n    }\n  }\n\n  onSaveComplete(): void {\n    // Reset the form to clear the flags\n    this.productForm.reset();\n    this.router.navigate(['/products']);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}