{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../workout.service\";\nimport * as i4 from \"@angular/common\";\nfunction WorkoutEditComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.pageTitle, \" \");\n  }\n}\nfunction WorkoutEditComponent_div_2_div_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵelement(1, \"img\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"height\", 150, \"px\")(\"margin\", 2, \"px\");\n    i0.ɵɵproperty(\"src\", ctx_r3.exercise.imageUrl, i0.ɵɵsanitizeUrl)(\"title\", ctx_r3.exercise.exerciseName);\n  }\n}\nconst _c0 = function (a1) {\n  return [\"/exercises\", a1, \"edit\"];\n};\nfunction WorkoutEditComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"div\", 6)(2, \"div\", 7)(3, \"div\", 6)(4, \"div\", 8);\n    i0.ɵɵtext(5, \"Id:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 9);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 6)(9, \"div\", 8);\n    i0.ɵɵtext(10, \"Code:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 9);\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(13, \"div\", 6)(14, \"div\", 8);\n    i0.ɵɵtext(15, \"Description:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"div\", 9);\n    i0.ɵɵtext(17);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(18, \"div\", 6)(19, \"div\", 8);\n    i0.ɵɵtext(20, \"Availability:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"div\", 9);\n    i0.ɵɵtext(22);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(23, \"div\", 6)(24, \"div\", 8);\n    i0.ɵɵtext(25, \"Price:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(26, \"div\", 9);\n    i0.ɵɵtext(27);\n    i0.ɵɵpipe(28, \"currency\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(29, \"div\", 6)(30, \"div\", 8);\n    i0.ɵɵtext(31, \"5 Star Rating:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(32, \"div\", 9);\n    i0.ɵɵelement(33, \"pm-star\", 10);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(34, \"div\", 6)(35, \"div\", 8);\n    i0.ɵɵtext(36, \"Tags:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(37, \"div\", 9);\n    i0.ɵɵtext(38);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(39, WorkoutEditComponent_div_2_div_39_Template, 2, 6, \"div\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(40, \"div\", 12)(41, \"div\", 13)(42, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function WorkoutEditComponent_div_2_Template_button_click_42_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onBack());\n    });\n    i0.ɵɵelement(43, \"i\", 15);\n    i0.ɵɵtext(44, \" Back \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(45, \"button\", 16);\n    i0.ɵɵtext(46, \" Edit \");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r1.exercise.id);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r1.exercise.exerciseCode);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r1.exercise.description);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r1.exercise.releaseDate);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind3(28, 9, ctx_r1.exercise.price, \"USD\", \"symbol\"));\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"rating\", ctx_r1.exercise.starRating);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r1.exercise.tags);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.exercise.imageUrl);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(13, _c0, ctx_r1.exercise.id));\n  }\n}\nfunction WorkoutEditComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r2.errorMessage, \" \");\n  }\n}\nexport class WorkoutEditComponent {\n  // private genericValidator: GenericValidator;\n  constructor(fb, route, router, workoutService) {\n    this.fb = fb;\n    this.route = route;\n    this.router = router;\n    this.workoutService = workoutService;\n    this.pageTitle = 'exercise Edit';\n    // Use with the generic validation message class\n    this.displayMessage = {};\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    this.validationMessages = {\n      exerciseName: {\n        required: 'exercise name is required.',\n        minlength: 'exercise name must be at least three characters.',\n        maxlength: 'exercise name cannot exceed 50 characters.'\n      },\n      exerciseCode: {\n        required: 'exercise code is required.'\n      },\n      starRating: {\n        range: 'Rate the exercise between 1 (lowest) and 5 (highest).'\n      }\n    };\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    // this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n\n  ngOnInit() {\n    this.exerciseForm = this.fb.group({\n      category: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\n      Series: [0, Validators.required],\n      Weight: [0, Validators.required]\n    });\n    // Read the exercise Id from the route parameter\n    this.sub = this.route.paramMap.subscribe(params => {\n      const id = +params.get('id');\n      this.getexercise(id);\n    });\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n  // ngAfterViewInit(): void {\n  //   // Watch for the blur event from any input element on the form.\n  //   // This is required because the valueChanges does not provide notification on blur\n  //   const controlBlurs: Observable<any>[] = this.formInputElements\n  //     .map((formControl: ElementRef) => fromEvent(formControl.nativeElement, 'blur'));\n  //   // Merge the blur event observable with the valueChanges observable\n  //   // so we only need to subscribe once.\n  //   merge(this.exerciseForm.valueChanges, ...controlBlurs).pipe(\n  //     debounceTime(800)\n  //   ).subscribe(value => {\n  //     this.displayMessage = this.genericValidator.processMessages(this.exerciseForm);\n  //   });\n  // }\n  getexercise(id) {\n    this.workoutService.getExercises(id).subscribe({\n      next: exercise => this.displayexercise(exercise),\n      error: err => this.errorMessage = err\n    });\n  }\n  displayexercise(exercise) {\n    if (this.exerciseForm) {\n      this.exerciseForm.reset();\n    }\n    this.exercise = exercise;\n    if (this.exercise.id === 0) {\n      this.pageTitle = 'Add exercise';\n    } else {\n      this.pageTitle = 'Edit exercise:';\n    }\n    // Update the data on the form\n    this.exerciseForm.patchValue({\n      category: this.exercise.category,\n      series: this.exercise.series,\n      weight: this.exercise.weight\n    });\n  }\n}\nWorkoutEditComponent.ɵfac = function WorkoutEditComponent_Factory(t) {\n  return new (t || WorkoutEditComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.WorkoutService));\n};\nWorkoutEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: WorkoutEditComponent,\n  selectors: [[\"app-workout-edit\"]],\n  decls: 4,\n  vars: 3,\n  consts: [[1, \"card\"], [\"class\", \"card-header\", 4, \"ngIf\"], [\"class\", \"card-body\", 4, \"ngIf\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [1, \"card-header\"], [1, \"card-body\"], [1, \"row\"], [1, \"col-md-8\"], [1, \"col-md-3\"], [1, \"col-md-6\"], [3, \"rating\"], [\"class\", \"col-md-4\", 4, \"ngIf\"], [1, \"row\", \"mt-4\"], [1, \"col-md-4\"], [1, \"btn\", \"btn-outline-secondary\", \"mr-3\", 2, \"width\", \"80px\", 3, \"click\"], [1, \"fa\", \"fa-chevron-left\"], [1, \"btn\", \"btn-outline-primary\", 2, \"width\", \"80px\", 3, \"routerLink\"], [1, \"center-block\", \"img-responsive\", 3, \"src\", \"title\"], [1, \"alert\", \"alert-danger\"]],\n  template: function WorkoutEditComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, WorkoutEditComponent_div_1_Template, 2, 1, \"div\", 1);\n      i0.ɵɵtemplate(2, WorkoutEditComponent_div_2_Template, 47, 15, \"div\", 2);\n      i0.ɵɵtemplate(3, WorkoutEditComponent_div_3_Template, 2, 1, \"div\", 3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.exercise);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.exercise);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n    }\n  },\n  dependencies: [i4.NgIf, i2.RouterLink, i4.CurrencyPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","WorkoutEditComponent","constructor","fb","route","router","workoutService","validationMessages","exerciseName","required","minlength","maxlength","exerciseCode","starRating","range","ngOnInit","exerciseForm","group","category","minLength","maxLength","Series","Weight","sub","paramMap","subscribe","params","id","get","getexercise","ngOnDestroy","unsubscribe","getExercises","next","exercise","displayexercise","error","err","errorMessage","reset","pageTitle","patchValue","series","weight","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["D:\\repos\\GymResult\\GymAngular\\src\\app\\workout\\workout-edit.component.ts","D:\\repos\\GymResult\\GymAngular\\src\\app\\workout\\workout-edit.component.html"],"sourcesContent":["import { AfterViewInit, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { WorkoutService } from '../workout.service';\nimport { Exerceise } from './exercise';\n\nimport { Workout } from './workout';\n\n@Component({\n  selector: 'app-workout-edit',\n  templateUrl: './workout-edit.component.html',\n  styleUrls: ['./workout-edit.component.css']\n})\nexport class WorkoutEditComponent  {\n\n\n  pageTitle = 'exercise Edit';\n  errorMessage: string;\n  exerciseForm: FormGroup;\n\n  exercise: Exerceise;\n  private sub: Subscription;\n\n  // Use with the generic validation message class\n  displayMessage: { [key: string]: string } = {};\n  private validationMessages: { [key: string]: { [key: string]: string } };\n  // private genericValidator: GenericValidator;\n\n\n\n  constructor(private fb: FormBuilder,\n              private route: ActivatedRoute,\n              private router: Router,\n              private workoutService: WorkoutService) {\n\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    this.validationMessages = {\n      exerciseName: {\n        required: 'exercise name is required.',\n        minlength: 'exercise name must be at least three characters.',\n        maxlength: 'exercise name cannot exceed 50 characters.'\n      },\n      exerciseCode: {\n        required: 'exercise code is required.'\n      },\n      starRating: {\n        range: 'Rate the exercise between 1 (lowest) and 5 (highest).'\n      }\n    };\n\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    // this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n\n  ngOnInit(): void {\n    this.exerciseForm = this.fb.group({\n      category: ['', [Validators.required,\n                         Validators.minLength(3),\n                         Validators.maxLength(50)]],\n      Series: [0, Validators.required],\n      Weight:[0, Validators.required],\n\n    });\n\n    // Read the exercise Id from the route parameter\n    this.sub = this.route.paramMap.subscribe(\n      params => {\n        const id = +params.get('id');\n        this.getexercise(id);\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.sub.unsubscribe();\n  }\n\n  // ngAfterViewInit(): void {\n  //   // Watch for the blur event from any input element on the form.\n  //   // This is required because the valueChanges does not provide notification on blur\n  //   const controlBlurs: Observable<any>[] = this.formInputElements\n  //     .map((formControl: ElementRef) => fromEvent(formControl.nativeElement, 'blur'));\n\n  //   // Merge the blur event observable with the valueChanges observable\n  //   // so we only need to subscribe once.\n  //   merge(this.exerciseForm.valueChanges, ...controlBlurs).pipe(\n  //     debounceTime(800)\n  //   ).subscribe(value => {\n  //     this.displayMessage = this.genericValidator.processMessages(this.exerciseForm);\n  //   });\n  // }\n\n\n\n  getexercise(id: number): void {\n    this.workoutService.getExercises(id)\n      .subscribe({\n        next: (exercise: Exerceise) => this.displayexercise(exercise),\n        error: err => this.errorMessage = err\n      });\n  }\n\n  displayexercise(exercise: Exerceise): void {\n    if (this.exerciseForm) {\n      this.exerciseForm.reset();\n    }\n    this.exercise = exercise;\n\n    if (this.exercise.id === 0) {\n      this.pageTitle = 'Add exercise';\n    } else {\n      this.pageTitle = 'Edit exercise:';\n    }\n\n    // Update the data on the form\n    this.exerciseForm.patchValue({\n      category: this.exercise.category,\n      series: this.exercise.series,\n      weight: this.exercise.weight,\n    \n    });\n    \n  }\n\n  // deleteexercise(): void {\n  //   if (this.exercise.id === 0) {\n  //     // Don't delete, it was never saved.\n  //     this.onSaveComplete();\n  //   } else {\n  //     if (confirm(`Really delete the exercise: ${this.exercise.exerciseName}?`)) {\n  //       this.exerciseService.deleteexercise(this.exercise.id)\n  //         .subscribe({\n  //           next: () => this.onSaveComplete(),\n  //           error: err => this.errorMessage = err\n  //         });\n  //     }\n  //   }\n  // }\n\n  // saveexercise(): void {\n  //   if (this.exerciseForm.valid) {\n  //     if (this.exerciseForm.dirty) {\n  //       const p = { ...this.exercise, ...this.exerciseForm.value };\n\n  //       if (p.id === 0) {\n  //         this.exerciseService.createexercise(p)\n  //           .subscribe({\n  //             next: () => this.onSaveComplete(),\n  //             error: err => this.errorMessage = err\n  //           });\n  //       } else {\n  //         this.exerciseService.updateexercise(p)\n  //           .subscribe({\n  //             next: () => this.onSaveComplete(),\n  //             error: err => this.errorMessage = err\n  //           });\n  //       }\n  //     } else {\n  //       this.onSaveComplete();\n  //     }\n  //   } else {\n  //     this.errorMessage = 'Please correct the validation errors.';\n  //   }\n  // }\n\n  // onSaveComplete(): void {\n  //   // Reset the form to clear the flags\n  //   this.exerciseForm.reset();\n  //   this.router.navigate(['/exercises']);\n  // }\n    \n\n  \n}\n","<div class=\"card\">\n    <div class=\"card-header\"\n         *ngIf=\"exercise\">\n      {{pageTitle}}\n    </div>\n  \n    <div class=\"card-body\"\n         *ngIf=\"exercise\">\n  \n      <div class=\"row\">\n  \n        <div class=\"col-md-8\">\n          <div class=\"row\">\n            <div class=\"col-md-3\">Id:</div>\n            <div class=\"col-md-6\">{{exercise.id}}</div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-3\">Code:</div>\n            <div class=\"col-md-6\">{{exercise.exerciseCode}}</div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-3\">Description:</div>\n            <div class=\"col-md-6\">{{exercise.description}}</div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-3\">Availability:</div>\n            <div class=\"col-md-6\">{{exercise.releaseDate}}</div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-3\">Price:</div>\n            <div class=\"col-md-6\">{{exercise.price|currency:\"USD\":\"symbol\"}}</div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-3\">5 Star Rating:</div>\n            <div class=\"col-md-6\">\n              <pm-star [rating]=\"exercise.starRating\">\n              </pm-star>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-3\">Tags:</div>\n            <div class=\"col-md-6\">{{exercise.tags}}</div>\n          </div>\n        </div>\n  \n        <div class=\"col-md-4\"\n             *ngIf=\"exercise.imageUrl\">\n          <img class=\"center-block img-responsive\"\n               [style.height.px]=\"150\"\n               [style.margin.px]=\"2\"\n               [src]=\"exercise.imageUrl\"\n               [title]=\"exercise.exerciseName\">\n        </div>\n      </div>\n  \n      <div class=\"row mt-4\">\n        <div class=\"col-md-4\">\n          <button class=\"btn btn-outline-secondary mr-3\"\n                  style=\"width:80px\"\n                  (click)=\"onBack()\">\n            <i class=\"fa fa-chevron-left\"></i> Back\n          </button>\n          <button class=\"btn btn-outline-primary\"\n                  style=\"width:80px\"\n                  [routerLink]=\"['/exercises', exercise.id, 'edit']\">\n            Edit\n          </button>\n        </div>\n      </div>\n  \n    </div>\n  \n    <div class=\"alert alert-danger\"\n         *ngIf=\"errorMessage\">{{errorMessage}}\n    </div>\n  </div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}